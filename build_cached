#!/bin/bash

MAKE=$1
SRC=$2
CACHESUBDIR=$3

# skip caching if cache folder is not set or does not exist or omd version length is too small, which would be error prone
if [ "x$BUILD_CACHE" = "x" ] || ! test -d $BUILD_CACHE || [ ${#OMD_VERSION} -lt 5 ]; then
    $MAKE -C "$SRC" build
    exit $?
fi

BUILD_CACHE=$BUILD_CACHE/$CACHESUBDIR
mkdir -p $BUILD_CACHE

$MAKE -C "$SRC" clean
MD5=$(cd "$SRC" && find . -type f -exec md5sum {} \; | sort | md5sum | awk '{ print $1 }')
CACHE_FILE="$BUILD_CACHE/${SRC}_${MD5}.tgz"

# cache hit - just unpack the already built package
if test -e "$CACHE_FILE"; then
    echo "md5sum matched, using cache from $CACHE_FILE"
    set -e
    tar zxf "$CACHE_FILE"
    set +e
    grep -rlI '###BUILD_OMD_VERSION###' "$SRC/" | \
    while read file; do
        cp -p "$file" "$file.tmp"
        sed -e "s%###BUILD_OMD_VERSION###%$OMD_VERSION%g" -i "$file"
        touch -r "$file.tmp" "$file"
        rm -f "$file.tmp"
    done
    exit 0
fi

# exclude files from before the build
EXCLUDES_FILE=$(mktemp)
find "$SRC" -type f > $EXCLUDES_FILE

# no cache hit - rebuild package and create cache tarball
set -e
$MAKE -C "$SRC" build
set +e

# create cache file
grep -rlI "$OMD_VERSION" "$SRC/" | \
while read file; do
    cp -p "$file" "$file.tmp"
    sed -e "s%$OMD_VERSION%###BUILD_OMD_VERSION###%g" -i "$file"
    touch -r "$file.tmp" "$file"
    rm -f "$file.tmp"
done
TARBALL_TMP=$(mktemp)
set -e
tar cfz $TARBALL_TMP "$SRC" --exclude-from=$EXCLUDES_FILE
rm -f "$CACHE_FILE"
mv $TARBALL_TMP "$CACHE_FILE"
set +e
echo "cache file $CACHE_FILE created"
rm $EXCLUDES_FILE
grep -rlI '###BUILD_OMD_VERSION###' "$SRC/" | \
while read file; do
    cp -p "$file" "$file.tmp"
    sed -e "s%###BUILD_OMD_VERSION###%$OMD_VERSION%g" -i "$file"
    touch -r "$file.tmp" "$file"
    rm -f "$file.tmp"
done

exit 0
