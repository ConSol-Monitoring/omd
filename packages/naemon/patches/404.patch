From 021c1bca92de76ff70882ffcf628b67117b5d7c5 Mon Sep 17 00:00:00 2001
From: Sven Nierlein <sven@nierlein.de>
Date: Thu, 24 Nov 2022 20:29:23 +0100
Subject: [PATCH 1/2] fix memory leak when parsing environment variables

---
 lib/runcmd.c | 6 ++++++
 1 file changed, 6 insertions(+)

diff --git a/lib/runcmd.c b/lib/runcmd.c
index 5ab0b55c..3df58724 100644
--- a/lib/runcmd.c
+++ b/lib/runcmd.c
@@ -140,6 +140,7 @@ int runcmd_cmd2strv(const char *str, int *out_argc, char **out_argv, int *out_en
 	len = strlen(str);
 	envz = malloc(len + 1);
 	*out_envc = env;
+	out_env[0] = envz;
 	for (i = 0; i < len && continue_env_parsing; i++) {
 		const char *p = &str[i];
 
@@ -472,6 +473,8 @@ int runcmd_open(const char *cmd, int *pfd, int *pfderr)
 		argv[2] = strdup(cmd);
 		if (!argv[2]) {
 			free(argv);
+			free(env[0]);
+			free(env);
 			return RUNCMD_EALLOC;
 		}
 		argv[3] = NULL;
@@ -549,6 +552,8 @@ int runcmd_open(const char *cmd, int *pfd, int *pfderr)
 			free(argv[0]);
 		else
 			free(argv[2]);
+		free(env[0]);
+		free(env);
 		_exit(errno);
 	}
 
@@ -565,6 +570,7 @@ int runcmd_open(const char *cmd, int *pfd, int *pfderr)
 	else
 		free(argv[2]);
 	free(argv);
+	free(env[0]);
 	free(env);
 
 	/* tag our file's entry in the pid-list and return it */

From f41db3d18f4514c463247c808de012985cfbcb05 Mon Sep 17 00:00:00 2001
From: Sven Nierlein <sven@nierlein.de>
Date: Fri, 25 Nov 2022 15:44:20 +0100
Subject: [PATCH 2/2] avoid runaway memory consumtion on unlimited open file
 limits

Usually ulimit -n is has sane values somewhere between 1000 and 10000. Some
container managers like docker set higher values, so naemon might end up
with ulimit of millions which just wastes memory.
If a single worker hits the open file limit, simply start more worker.
---
 lib/iobroker.c | 4 ++++
 lib/runcmd.c   | 5 +++++
 2 files changed, 9 insertions(+)

diff --git a/lib/iobroker.c b/lib/iobroker.c
index ddc6ec87..69573d08 100644
--- a/lib/iobroker.c
+++ b/lib/iobroker.c
@@ -140,6 +140,10 @@ struct iobroker_set *iobroker_create(void)
 	}
 
 	iobs->max_fds = iobroker_max_usable_fds();
+	/* add sane max limit, if ulimit is set to unlimited or a very high value we
+	 * don't want to waste memory for nothing */
+	if (iobs->max_fds > 100000)
+		iobs->max_fds = 100000;
 	iobs->iobroker_fds = calloc(iobs->max_fds, sizeof(iobroker_fd *));
 	if (!iobs->iobroker_fds) {
 		goto error_out;
diff --git a/lib/runcmd.c b/lib/runcmd.c
index 3df58724..0c98e16f 100644
--- a/lib/runcmd.c
+++ b/lib/runcmd.c
@@ -424,6 +424,11 @@ void runcmd_init(void)
 	}
 #endif
 
+	/* add sane max limit, if ulimit is set to unlimited or a very high value we
+	 * don't want to waste memory for nothing */
+	if (maxfd > 100000)
+		maxfd = 100000;
+
 	/* reset pipe handling so child processes can use shell pipes */
 	signal(SIGPIPE, SIG_DFL);
 
