From 7f8bcbba53769287a23db7db82591443ca3cafc7 Mon Sep 17 00:00:00 2001
From: Sven Nierlein <sven@nierlein.de>
Date: Thu, 4 Oct 2018 22:23:31 +0200
Subject: [PATCH 1/2] Add host_down_disable_service_checks config option

Add option to *not* check services if their host is down.

references:
      - https://github.com/NagiosEnterprises/nagioscore/commit/05e1dda8ccaa9d633b22b11a555d67724930a3e7
---
 sample-config/naemon.cfg.in | 10 ++++++++++
 src/naemon/checks_service.c | 13 +++++++++++++
 src/naemon/configuration.c  |  2 ++
 src/naemon/defaults.h       |  1 +
 src/naemon/globals.h        |  1 +
 src/naemon/utils.c          |  1 +
 6 files changed, 28 insertions(+)

diff --git a/sample-config/naemon.cfg.in b/sample-config/naemon.cfg.in
index b3116837..63289086 100644
--- a/sample-config/naemon.cfg.in
+++ b/sample-config/naemon.cfg.in
@@ -1024,6 +1024,16 @@ allow_empty_hostgroup_assignment=0
 
 #check_workers=3
 
+
+# DISABLE SERVICE CHECKS WHEN HOST DOWN
+# This option will disable all service checks if the host is not in an UP state
+#
+# While desirable in some environments, enabling this value can distort report
+# values as the expected quantity of checks will not have been performed
+
+#host_down_disable_service_checks=0
+
+
 # CIRCULAR DEPENDENCIES (EXPERIMENTAL)
 # Allow for circular dependencies in naemon's host graph.
 # Enabaling this will cause propagation the following to stop working:
diff --git a/src/naemon/checks_service.c b/src/naemon/checks_service.c
index 683cc8a2..2a05cd9e 100644
--- a/src/naemon/checks_service.c
+++ b/src/naemon/checks_service.c
@@ -140,6 +140,7 @@ static void handle_service_check_event(struct nm_event_execution_properties *evp
 	struct timeval tv;
 	struct timeval event_runtime;
 	int options = temp_service->check_options;
+	host *temp_host = NULL;
 
     log_debug_info(DEBUGL_CHECKS, 0, "Service '%s' on host '%s' handle_service_check_event()...\n", temp_service->description, temp_service->host_name);
 
@@ -200,6 +201,18 @@ static void handle_service_check_event(struct nm_event_execution_properties *evp
 				return;
 			}
 
+			/* check if host is up - if not, do not perform check */
+			if(host_down_disable_service_checks) {
+				if((temp_host = temp_service->host_ptr) == NULL) {
+					log_debug_info(DEBUGL_CHECKS, 2, "Host pointer NULL in handle_service_check_event().\n");
+					return;
+				} else {
+					if(temp_host->current_state != STATE_UP) {
+						log_debug_info(DEBUGL_CHECKS, 2, "Host state not UP, so service check will not be performed - will be rescheduled as normal.\n");
+						return;
+					}
+				}
+			}
 		}
 
 		/* Otherwise, run the event */
diff --git a/src/naemon/configuration.c b/src/naemon/configuration.c
index af4f660a..95df1c31 100644
--- a/src/naemon/configuration.c
+++ b/src/naemon/configuration.c
@@ -1058,6 +1058,8 @@ read_config_file(const char *main_config_file, nagios_macros *mac)
 			allow_empty_hostgroup_assignment = (atoi(value) > 0) ? TRUE : FALSE;
 		} else if (!strcmp(variable, "allow_circular_dependencies")) {
 			allow_circular_dependencies=atoi(value);
+		} else if(!strcmp(variable,"host_down_disable_service_checks")) {
+			host_down_disable_service_checks = strtoul(value, NULL, 0);
 		}
 		/* skip external data directives */
 		else if (strstr(input, "x") == input)
diff --git a/src/naemon/defaults.h b/src/naemon/defaults.h
index 17c09a5b..569d575d 100644
--- a/src/naemon/defaults.h
+++ b/src/naemon/defaults.h
@@ -86,6 +86,7 @@
 
 #define DEFAULT_ALLOW_EMPTY_HOSTGROUP_ASSIGNMENT        2        /* Allow assigning to empty hostgroups by default, but warn about it */
 #define DEFAULT_ALLOW_CIRCULAR_DEPENDENCIES             0        /* Allow circular depdendencies */
+#define DEFAULT_HOST_DOWN_DISABLE_SERVICE_CHECKS        0        /* run service checks if the host is down */
 
 #define DEFAULT_HOST_PERFDATA_FILE_TEMPLATE "[HOSTPERFDATA]\t$TIMET$\t$HOSTNAME$\t$HOSTEXECUTIONTIME$\t$HOSTOUTPUT$\t$HOSTPERFDATA$"
 #define DEFAULT_SERVICE_PERFDATA_FILE_TEMPLATE "[SERVICEPERFDATA]\t$TIMET$\t$HOSTNAME$\t$SERVICEDESC$\t$SERVICEEXECUTIONTIME$\t$SERVICELATENCY$\t$SERVICEOUTPUT$\t$SERVICEPERFDATA$"
diff --git a/src/naemon/globals.h b/src/naemon/globals.h
index 95a8fa02..f0aa835d 100644
--- a/src/naemon/globals.h
+++ b/src/naemon/globals.h
@@ -144,6 +144,7 @@ extern unsigned long max_debug_file_size;
 
 extern int allow_empty_hostgroup_assignment;
 extern int allow_circular_dependencies;
+extern int host_down_disable_service_checks;
 
 extern time_t last_program_stop;
 extern time_t event_start;
diff --git a/src/naemon/utils.c b/src/naemon/utils.c
index 56c59fa0..bdd25129 100644
--- a/src/naemon/utils.c
+++ b/src/naemon/utils.c
@@ -164,6 +164,7 @@ char *use_timezone = NULL;
 
 int allow_empty_hostgroup_assignment = DEFAULT_ALLOW_EMPTY_HOSTGROUP_ASSIGNMENT;
 int allow_circular_dependencies = DEFAULT_ALLOW_CIRCULAR_DEPENDENCIES;
+int host_down_disable_service_checks = DEFAULT_HOST_DOWN_DISABLE_SERVICE_CHECKS;
 
 static long long check_file_size(char *, unsigned long, struct rlimit);
 

From 42f392914fe9a8a96c3c563f1f714bfee283b825 Mon Sep 17 00:00:00 2001
From: Jacob Hansen <jhansen@op5.com>
Date: Mon, 10 Dec 2018 13:33:07 +0000
Subject: [PATCH 2/2] Test host_down_disable_service_checks

This commit adds a simple test to ensure that no service checks are
being run if the setting host_down_disable_service_checks is enabled.

Signed-off-by: Jacob Hansen <jhansen@op5.com>
---
 tests/test-check-scheduling.c | 42 +++++++++++++++++++++++++++++++++++
 1 file changed, 42 insertions(+)

diff --git a/tests/test-check-scheduling.c b/tests/test-check-scheduling.c
index 7722ebff..8d8e5184 100644
--- a/tests/test-check-scheduling.c
+++ b/tests/test-check-scheduling.c
@@ -895,6 +895,47 @@ START_TEST(service_retain_always_within_check_interval)
 }
 END_TEST
 
+/* If host_down_disable_service_checks is true, and the the services host is
+ * down, then we should not perform service checks
+ */
+START_TEST(disable_service_check_host_down)
+{
+	struct nm_event_execution_properties ep = {
+		.execution_type = EVENT_EXEC_NORMAL,
+		.event_type = EVENT_TYPE_TIMED,
+		.user_data = svc
+	};
+	check_result cr;
+	host_down_disable_service_checks = TRUE;
+
+	hst->check_options = 0;
+	hst->checks_enabled = TRUE;
+	hst->check_freshness = TRUE;
+	hst->max_attempts = 3;
+	hst->current_attempt = 3;
+	hst->current_state = STATE_CRITICAL;
+	hst->last_hard_state = STATE_CRITICAL;
+	hst->state_type = HARD_STATE;
+
+	svc->checks_enabled = TRUE;
+	svc->check_freshness = TRUE;
+	svc->max_attempts = 3;
+	svc->current_state = STATE_CRITICAL;
+	svc->last_hard_state = STATE_CRITICAL;
+	svc->state_type = HARD_STATE;
+	svc->current_attempt = 3;
+	svc->host_ptr = hst;
+
+	init_check_result(&cr);
+	cr.object_check_type = SERVICE_CHECK;
+	cr.check_type = CHECK_TYPE_ACTIVE;
+	cr.return_code = STATE_CRITICAL;
+	handle_service_check_event(&ep);
+	handle_async_service_check_result(svc, &cr);
+
+	ck_assert(!g_service_was_checked);
+}
+END_TEST
 
 Suite*
 check_scheduling_suite(void)
@@ -942,6 +983,7 @@ check_scheduling_suite(void)
 
 	tcase_add_checked_fixture(tc_miscellaneous, setup, teardown);
 	tcase_add_test(tc_miscellaneous, test_check_window);
+	tcase_add_test(tc_miscellaneous, disable_service_check_host_down);
 	suite_add_tcase(s, tc_miscellaneous);
 
 	return s;
