From c88320bab2b3830a2987f9a57774a93843e9b84a Mon Sep 17 00:00:00 2001
From: Jacob Hansen <jhansen@op5.com>
Date: Fri, 2 Mar 2018 11:12:58 +0100
Subject: [PATCH 1/2] Mark intentional fallthroughs in switch statements

GCC 7 introduced warning messages for fallthroughs in switch
statements (-Wimplicit-fallthrough). This introduced new warnings
when building Naemon with GCC 7. As we compile with -Werror this breaks
the build.

This patch adds comments where fallthroughs are intentional, which
silences the warnings.

This is the first of two patches to fix
https://github.com/naemon/naemon-core/issues/184 / MON-10862

Signed-off-by: Jacob Hansen <jhansen@op5.com>
---
 lib/runcmd.c        | 1 +
 lib/snprintf.c      | 2 ++
 src/naemon/macros.c | 6 ++++++
 3 files changed, 9 insertions(+)

diff --git a/lib/runcmd.c b/lib/runcmd.c
index eb6668fe..609aa351 100644
--- a/lib/runcmd.c
+++ b/lib/runcmd.c
@@ -199,6 +199,7 @@ int runcmd_cmd2strv(const char *str, int *out_argc, char **out_argv)
 				set_state(STATE_INSQ | STATE_INARG);
 				continue;
 			}
+			/* FALLTHROUGH */
 		case '"':
 			if (have_state(STATE_INSQ))
 				break;
diff --git a/lib/snprintf.c b/lib/snprintf.c
index 49bf8962..f35acf01 100644
--- a/lib/snprintf.c
+++ b/lib/snprintf.c
@@ -493,6 +493,7 @@ static size_t dopr(char *buffer, size_t maxlen, const char *format, va_list args
 				break;
 			case 'X':
 				cnk->flags |= DP_F_UP;
+				/* FALLTHROUGH */
 			case 'x':
 				cnk->type = CNK_HEX;
 				cnk->flags |= DP_F_UNSIGNED;
@@ -503,6 +504,7 @@ static size_t dopr(char *buffer, size_t maxlen, const char *format, va_list args
 			case 'G':
 			case 'F':
 				cnk->flags |= DP_F_UP;
+				/* FALLTHROUGH */
 			case 'a':
 				/* hex float not supported yet */
 			case 'e':
diff --git a/src/naemon/macros.c b/src/naemon/macros.c
index c0257fcf..a464deee 100644
--- a/src/naemon/macros.c
+++ b/src/naemon/macros.c
@@ -1518,6 +1518,7 @@ static int grab_macrox_value_r(nagios_macros *mac, int macro_type, char *arg1, c
 		/***************/
 	case MACRO_HOSTGROUPNAMES:
 		*free_macro = TRUE;
+		/* FALLTHROUGH */
 	case MACRO_HOSTNAME:
 	case MACRO_HOSTALIAS:
 	case MACRO_HOSTADDRESS:
@@ -1612,6 +1613,7 @@ static int grab_macrox_value_r(nagios_macros *mac, int macro_type, char *arg1, c
 		/********************/
 	case MACRO_HOSTGROUPMEMBERS:
 		*free_macro = TRUE;
+		/* FALLTHROUGH */
 	case MACRO_HOSTGROUPNAME:
 	case MACRO_HOSTGROUPALIAS:
 	case MACRO_HOSTGROUPNOTES:
@@ -1640,6 +1642,7 @@ static int grab_macrox_value_r(nagios_macros *mac, int macro_type, char *arg1, c
 		/******************/
 	case MACRO_SERVICEGROUPNAMES:
 		*free_macro = TRUE;
+		/* FALLTHROUGH */
 	case MACRO_SERVICEDESC:
 	case MACRO_SERVICESTATE:
 	case MACRO_SERVICESTATEID:
@@ -1757,6 +1760,7 @@ static int grab_macrox_value_r(nagios_macros *mac, int macro_type, char *arg1, c
 	case MACRO_SERVICEGROUPNOTESURL:
 	case MACRO_SERVICEGROUPACTIONURL:
 		*free_macro = TRUE;
+		/* FALLTHROUGH */
 	case MACRO_SERVICEGROUPNAME:
 	case MACRO_SERVICEGROUPALIAS:
 		/* a standard servicegroup macro */
@@ -1781,6 +1785,7 @@ static int grab_macrox_value_r(nagios_macros *mac, int macro_type, char *arg1, c
 		/******************/
 	case MACRO_CONTACTGROUPNAMES:
 		*free_macro = TRUE;
+		/* FALLTHROUGH */
 	case MACRO_CONTACTNAME:
 	case MACRO_CONTACTALIAS:
 	case MACRO_CONTACTEMAIL:
@@ -1841,6 +1846,7 @@ static int grab_macrox_value_r(nagios_macros *mac, int macro_type, char *arg1, c
 		/***********************/
 	case MACRO_CONTACTGROUPMEMBERS:
 		*free_macro = TRUE;
+		/* FALLTHROUGH */
 	case MACRO_CONTACTGROUPNAME:
 	case MACRO_CONTACTGROUPALIAS:
 		/* a standard contactgroup macro */

From b73ef00e50ca33e6c63116bcc7d0ed5beaba9675 Mon Sep 17 00:00:00 2001
From: Jacob Hansen <jhansen@op5.com>
Date: Fri, 9 Mar 2018 16:19:26 +0100
Subject: [PATCH 2/2] Check snprintf for encoding errors and truncation

GCC 7 introduced warning messages for possible truncation of output from
snprintf (and friends). This introduced new warnings when building
Naemon with GCC 7. As we compile with -Werror this break the build.

This patch first checks for any encoding errors that might error as a
result of snprintf, and thereafter ensures that the output was not
truncated. If any errors occurs a warning message is printed.

In checks.c the call to snprintf was moved inside an if statement as
the result of snprintf is only used inside the mentioned if statement.
This ensures we only print warnings if the file is actually used.

This is the second of two patches to fix
https://github.com/naemon/naemon-core/issues/184 / MON-10862

Signed-off-by: Jacob Hansen <jhansen@op5.com>
---
 src/naemon/checks.c        | 22 ++++++++++++++++++----
 src/naemon/configuration.c | 17 ++++++++++++++++-
 src/naemon/xodtemplate.c   | 17 ++++++++++++++++-
 3 files changed, 50 insertions(+), 6 deletions(-)

diff --git a/src/naemon/checks.c b/src/naemon/checks.c
index 97bd9f73..17435e9d 100644
--- a/src/naemon/checks.c
+++ b/src/naemon/checks.c
@@ -239,14 +239,28 @@ int process_check_result_queue(char *dirname)
 			break;
 		}
 
-		/* create /path/to/file */
-		snprintf(file, sizeof(file), "%s/%s", dirname, dirfile->d_name);
-		file[sizeof(file) - 1] = '\x0';
-
 		/* process this if it's a check result file... */
 		x = strlen(dirfile->d_name);
 		if (x == 7 && dirfile->d_name[0] == 'c') {
 
+			/* create /path/to/file */
+			int written_size = snprintf(file, sizeof(file), "%s/%s", dirname, dirfile->d_name);
+			file[sizeof(file) - 1] = '\x0';
+
+			/* Check for encoding errors */
+			if (written_size < 0) {
+				nm_log(NSLOG_RUNTIME_WARNING,
+					"Warning: encoding error on check result file path '`%s'.\n", file);
+				continue;
+			}
+
+			/* Check if the filename was truncated */
+			if (written_size > 0 && (size_t)written_size >= sizeof(file)) {
+				nm_log(NSLOG_RUNTIME_WARNING,
+				"Warning: truncated path to check result file '%s'.\n", file);
+				continue;
+			}
+
 			if (stat(file, &stat_buf) == -1) {
 				nm_log(NSLOG_RUNTIME_WARNING,
 				       "Warning: Could not stat() check result file '%s'.\n", file);
diff --git a/src/naemon/configuration.c b/src/naemon/configuration.c
index 3c63e88c..af4f660a 100644
--- a/src/naemon/configuration.c
+++ b/src/naemon/configuration.c
@@ -1013,6 +1013,7 @@ read_config_file(const char *main_config_file, nagios_macros *mac)
 				break;
 			} else {
 				while ((dirfile = readdir(dirp)) != NULL) {
+					int written_size;
 					char file[MAX_FILENAME_LENGTH];
 
 					/* skip hidden files and directories, current and parent dir, and non-config files */
@@ -1022,9 +1023,23 @@ read_config_file(const char *main_config_file, nagios_macros *mac)
 						continue;
 
 					/* create /path/to/file */
-					snprintf(file, sizeof(file), "%s/%s", include_dir, dirfile->d_name);
+					written_size = snprintf(file, sizeof(file), "%s/%s", include_dir, dirfile->d_name);
 					file[sizeof(file) - 1] = '\x0';
 
+					/* Check for encoding errors */
+					if (written_size < 0) {
+						nm_log(NSLOG_RUNTIME_WARNING,
+							"Warning: encoding error on config file path '`%s'.\n", file);
+						continue;
+					}
+
+					/* Check if the filename was truncated. */
+					if (written_size > 0 && (size_t)written_size >= sizeof(file)) {
+						nm_log(NSLOG_RUNTIME_WARNING,
+							"Warning: truncated path to config file '%s'.\n", file);
+						continue;
+					}
+
 					error |= read_config_file(file, mac);
 				}
 				closedir(dirp);
diff --git a/src/naemon/xodtemplate.c b/src/naemon/xodtemplate.c
index d5fd1cda..1455656d 100644
--- a/src/naemon/xodtemplate.c
+++ b/src/naemon/xodtemplate.c
@@ -8456,15 +8456,30 @@ static int xodtemplate_process_config_dir(char *dir_name)
 
 	/* process all files in the directory... */
 	while ((dirfile = readdir(dirp)) != NULL) {
+		int written_size;
 
 		/* skip hidden files and directories, and current and parent dir */
 		if (dirfile->d_name[0] == '.')
 			continue;
 
 		/* create /path/to/file */
-		snprintf(file, sizeof(file), "%s/%s", dir_name, dirfile->d_name);
+		written_size = snprintf(file, sizeof(file), "%s/%s", dir_name, dirfile->d_name);
 		file[sizeof(file) - 1] = '\x0';
 
+		/* Check for encoding errors */
+		if (written_size < 0) {
+			nm_log(NSLOG_RUNTIME_WARNING,
+				"Warning: xodtemplate encoding error on config file path '`%s'.\n", file);
+			continue;
+		}
+
+		/* Check if the filename was truncated. */
+		if (written_size > 0 && (size_t)written_size >= sizeof(file)) {
+			nm_log(NSLOG_RUNTIME_WARNING,
+				"Warning: xodtemplate truncated path to config file '`%s'.\n", file);
+			continue;
+		}
+
 		/* process this if it's a non-hidden config file... */
 		if (stat(file, &stat_buf) == -1) {
 			nm_log(NSLOG_RUNTIME_ERROR, "Error: Could not open config directory member '%s' for reading.\n", file);
