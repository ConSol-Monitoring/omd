# ENABLE PREDICTIVE HOST DEPENDENCY CHECKS
# This option determines whether or not Naemon will attempt to execute
# checks of hosts when it predicts that future dependency logic test
# may be needed.  These predictive checks can help ensure that your
# host dependency logic works well.
# Values:
#  0 = Disable predictive checks
#  1 = Enable predictive checks (default)

enable_predictive_host_dependency_checks=1



# ENABLE PREDICTIVE SERVICE DEPENDENCY CHECKS
# This option determines whether or not Naemon will attempt to execute
# checks of service when it predicts that future dependency logic test
# may be needed.  These predictive checks can help ensure that your
# service dependency logic works well.
# Values:
#  0 = Disable predictive checks
#  1 = Enable predictive checks (default)

enable_predictive_service_dependency_checks=1



# SOFT STATE DEPENDENCIES
# This option determines whether or not Naemon will use soft state
# information when checking host and service dependencies. Normally
# Naemon will only use the latest hard host or service state when
# checking dependencies. If you want it to use the latest state (regardless
# of whether its a soft or hard state type), enable this option.
# Values:
#  0 = Don't use soft state dependencies (default)
#  1 = Use soft state dependencies

soft_state_dependencies=1


# DISABLE SERVICE CHECKS WHEN HOST DOWN
# This option will disable all service checks if the host is not in an UP state
#
# While desirable in some environments, enabling this value can distort report
# values as the expected quantity of checks will not have been performed

#host_down_disable_service_checks=0

# SET SERVICE/HOST STATUS WHEN SERVICE CHECK SKIPPED
# These options will allow you to set the status of a service when its
# service check is skipped due to one of two reasons:
# 1) failed dependency check; 2) host not up
# Number 2 can only happen if 'host_down_disable_service_checks' above
# is set to 1.
# Valid values for the service* options are:
#     -1     Do not change the service status (default)
#      0     Set the service status to STATE_OK
#      1     Set the service status to STATE_WARNING
#      2     Set the service status to STATE_CRITICAL
#      3     Set the service status to STATE_UNKNOWN
#service_skip_check_dependency_status=-1
#service_skip_check_host_down_status=-1

# The host_dependency_skip_check_status option will allow you to set the
# status of a host when its check is skipped due to a failed dependency check.
# Valid values for the host_dependency_skip_check_status are:
#     -1     Do not change the service status (default)
#      0     Set the host status to STATE_UP
#      1     Set the host status to STATE_DOWN
#      2     Set the host status to STATE_UNREACHABLE
#host_skip_check_dependency_status=-1

# CIRCULAR DEPENDENCIES (EXPERIMENTAL)
# Allow for circular dependencies in naemon's host graph.
# Enabaling this will cause propagation the following to stop working:
# * scheduling downtime
# * enabling notification
# * disabling notification
# This feature is experimental and bugs might occur.

allow_circular_dependencies=0
