# OMD default settings.

# Please do not change settings here. Copy the variables
# you want to override to ../naemon.cfg and edit them there.
# Settings in naemon.cfg have always precedence.

# State retention configuration

# RETAIN STATE INFORMATION
# This setting determines whether or not Naemon will save state
# information for services and hosts before it shuts down.  Upon
# startup Naemon will reload all saved service and host state
# information before starting to monitor.  This is useful for 
# maintaining long-term data on state statistics, etc, but will
# slow Naemon down a bit when it (re)starts.  Since its only
# a one-time penalty, I think its well worth the additional
# startup delay.

retain_state_information=1

# RETENTION DATA UPDATE INTERVAL
# This setting determines how often (in minutes) that Naemon
# will automatically save retention data during normal operation.
# If you set this value to 0, Naemon will not save retention
# data at regular interval, but it will still save retention
# data before shutting down or restarting.  If you have disabled
# state retention, this option has no effect.

retention_update_interval=60

# USE RETAINED PROGRAM STATE
# This setting determines whether or not Naemon will set
# program status variables based on the values saved in the
# retention file.  If you want to use retained program status
# information, set this value to 1.  If not, set this value
# to 0.

use_retained_program_state=1

# USE RETAINED SCHEDULING INFO
# This setting determines whether or not Naemon will retain
# the scheduling info (next check time) for hosts and services
# based on the values saved in the retention file.  If you
# If you want to use retained scheduling info, set this
# value to 1.  If not, set this value to 0.

use_retained_scheduling_info=1


# RETAINED_SCHEDULING_RANDOMIZE_WINDOW
# If use_retained_scheduling info is enabled, this setting
# sets the window (in seconds), in which checks that were
# supposed to executed during a restart, is rescheduled.
# That is, if set to 60 seconds, then all checks that were
# missed due to a restart will be scheduled randomly to be
# executed in the first 60 seconds after a restart.
# If the retained_scheduling_randomize_window is larger than
# the objects check_interval, the check_interval is used
# instead.

retained_scheduling_randomize_window=60


# RETAINED ATTRIBUTE MASKS (ADVANCED FEATURE)
# The following variables are used to specify specific host and
# service attributes that should *not* be retained by Naemon during
# program restarts.
#
# The values of the masks are bitwise ANDs of values specified
# by the "MODATTR_" definitions found in include/common.h.  
# For example, if you do not want the current enabled/disabled state
# of flap detection and event handlers for hosts to be retained, you
# would use a value of 24 for the host attribute mask...
# MODATTR_EVENT_HANDLER_ENABLED (8) + MODATTR_FLAP_DETECTION_ENABLED (16) = 24

# This mask determines what host attributes are not retained

retained_host_attribute_mask=0

# This mask determines what service attributes are not retained
retained_service_attribute_mask=0

# These two masks determine what process attributes are not retained.
# There are two masks, because some process attributes have host and service
# options.  For example, you can disable active host checks, but leave active
# service checks enabled.
retained_process_host_attribute_mask=0
retained_process_service_attribute_mask=0

# These two masks determine what contact attributes are not retained.
# There are two masks, because some contact attributes have host and
# service options.  For example, you can disable host notifications for
# a contact, but leave service notifications enabled for them.
retained_contact_host_attribute_mask=0
retained_contact_service_attribute_mask=0
