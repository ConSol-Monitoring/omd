#!/usr/bin/env perl

use strict;
use warnings;
use Monitoring::Livestatus;

my $ml = Monitoring::Livestatus->new( socket => "$ENV{OMD_ROOT}/tmp/run/live");
my $ls_downtimes = $ml->selectall_arrayref("GET downtimes\nColumns: id host_name service_description host_comments service_comments entry_time");
my $ls_comments = $ml->selectall_arrayref("GET comments\nColumns: id host_name service_description comment entry_time");

use Data::Dumper;

my $downtimes = {};
my $comments = {};
foreach my $downtime (@$ls_downtimes) {
  my $dt_id = $downtime->[0];
  my $host_name = $downtime->[1];
  my $service_description = $downtime->[2];
  my $host_comment_ids = $downtime->[3];
  my $service_comment_ids = $downtime->[4];
  my $dt_entry_time = $downtime->[5];
  $downtimes->{$dt_id}->{ident} = $service_description ? $host_name .'_'. $service_description : $host_name;
  $downtimes->{$dt_id}->{type} = $service_description ? "SVC" : "HOST";
  $downtimes->{$dt_id}->{comment_ids} = $service_description ? $service_comment_ids : $host_comment_ids;
  $downtimes->{$dt_id}->{entry_time} =  $dt_entry_time;
}
foreach my $comment (@$ls_comments) {
  my $ct_id = $comment->[0];
  my $host_name = $comment->[1];
  my $service_description = $comment->[2];
  my $ct_comment = $comment->[3];
  my $ct_entry_time = $comment->[4];
  $comments->{$ct_id}->{ident} = $service_description ? $host_name .'_'. $service_description : $host_name;
  $comments->{$ct_id}->{type} = $service_description ? "SVC" : "HOST";
  $comments->{$ct_id}->{comment} = $ct_comment;
  $comments->{$ct_id}->{entry_time} = $ct_entry_time;
}

my $good_comments = {};
my $bad_comments = {};

# loop through downtimes' comment-ids and find the comment which was initially
# added when the downtime was created.
foreach my $dt_id (keys %{$downtimes}) {
  foreach my $ct_id (@{$downtimes->{$dt_id}->{comment_ids}}) {
    if (exists $comments->{$ct_id} && $comments->{$ct_id}->{ident} eq $downtimes->{$dt_id}->{ident}) {
      if ($comments->{$ct_id}->{entry_time} >=
          $downtimes->{$dt_id}->{entry_time} &&
          $comments->{$ct_id}->{entry_time} <
          $downtimes->{$dt_id}->{entry_time} + 10) {
        $good_comments->{$ct_id} = 1;
      }
    }
  }
}

# loop though all comments which are downtime-related and delete all of them which are
# not the first comment of an existind downtime.
foreach my $ct_id (keys %{$comments}) {
  if (! exists $good_comments->{$ct_id} &&
      $comments->{$ct_id}->{comment} =~ /This (host|service).*downtime/) {
    $bad_comments->{$ct_id} = 1;
  }
}

#printf "good %s\n", Data::Dumper::Dumper($good_comments);
#printf "bad %s\n", Data::Dumper::Dumper($bad_comments);

foreach my $id (keys %{$bad_comments}) {
  $ml->do(sprintf "COMMAND [%ld] DEL_%s_COMMENT;%s\n", time, $comments->{$id}->{type}, $id);
  sleep 0.1;
}

exit;
