#!/bin/bash

# chkconfig: 345 99 01
# description: Promlens Promql analyzer

### BEGIN INIT INFO
# Provides:       promlens
# Required-Start:
# Required-Stop:
# Default-Start:  2 3 5
# Default-Stop:
# Description:   Promlens Promql analyzer
### END INIT INFO

# Author: Matthias Gallinger <matthias.gallinger@consol.de>

# Notes for OMD init script requirements
# - Must handle omd config options like daemon enabling/disabling
# - When a daemon is disabled by omd config it needs
#   to return an exit code of 5.
# - The init script must output an exit code of 2 when
#   an unknown param is used.
# - In general the exit code for succeeded actions is
#   0 and for failed actions it is 1.
# - There are exceptions for the exit code handling:
#   - When a service is already stopped and should be
#     restarted/stopped, it should result in an exit code of 0.
#   - When a service is already running and should be started
#     this also should result in an exit code of 0.
# - When a restart is requested and the program is still not running
#   the script should only execute a start
# - When a restart is requested and the program can not be stopped the
#   script should terminate without starting the daemon
# - When a reload is requested and the program is not running
#   the init script should execute a start instead

cd ###ROOT###
. .profile
. lib/omd/init_profile
. etc/omd/site.conf
[ "$CONFIG_PROMLENS" = "on" ] || exit 5

mkdir -p ###ROOT###/tmp/promlens
mkdir -p ###ROOT###/var/promlens
BIN=###ROOT###/bin/promlens
TOKEN=###ROOT###/etc/promlens/token
LOG_DIR=###ROOT###/var/promlens
LOGFILE=###ROOT###/var/promlens/promlens.log
PID_FILE=###ROOT###/tmp/lock/promlens.lock
SQLITE=###ROOT###/var/promlens/links.sql
USR=###SITE###
GRP=###SITE###

EXTERNAL_FQDN=${OMD_EXTERNAL_FQDN:-$(hostname --fqdn)}

OPTIONS="--web.listen-address=127.0.0.1:${CONFIG_PROMLENS_TCP_PORT} --log.level=info --web.external-url=http://${EXTERNAL_FQDN}/${OMD_SITE}/promlens --shared-links.sql.driver=sqlite --shared-links.sql.dsn=$SQLITE"
if [ -r $TOKEN ]; then
    OPTIONS="$OPTIONS --grafana.url=http://127.0.0.1:${CONFIG_GRAFANA_TCP_PORT} --grafana.api-token-file=$TOKEN"
fi
# Fetches the pid of the currently running promlens process of the given
# user.
#
# --ppid 1 in ps seem not to filter by direct ppid but by the whole
# parent process tree. So filter by hand again.
#
# It returns 1 when no process can be found and echos the PID while
# returning 0 when a process can be found.
promlens_proc() {
    PID=$(pgrep -u $USR -o -fx "$BIN $OPTIONS" 2>/dev/null)
    #PROC=$(ps -u $USR --ppid 1 -o pid,ppid,cmd \
    #         | grep "$BIN $OPTIONS" 2>&1 | grep ' 1 ' | grep -v grep)
    #PID=$(echo "$PROC" | sed 's/^ *//g' | cut -d' ' -f1)
    if [ "$PID" != "" ]; then
        echo "$PID"
        return 0
    else
        return 1
    fi
}

# First try to use the process list to gather a promlens process,
# when no process is found via ps take a look at the lock file
#
# It returns 1 when no process can be found and echos the PID while
# returning 0 when a process can be found.
pidof_promlens() {
    promlens_proc
    return $?
}


verify_config() {
    if [ "$1" != "quiet" ]; then
        echo -n "Running configuration check... "
    fi
    RESULT=$($TOOL check config $CFG_FILE 2>&1)
    if [ $? -eq 0 ]; then
        if [ "$1" != "quiet" ]; then
            echo "done."
            echo "$RESULT" >&2
        fi
        return 0
    else
        if [ "$1" != "quiet" ]; then
            echo "CONFIG ERROR! Aborted. Check your Prometheus configuration."
        fi
        echo "$RESULT" >&2
        return 1
    fi
}

promlens_wait_stop() {
    pid=$(pidof_promlens) || true
    if ! kill -0 "${pid:-}" >/dev/null 2>&1; then
        echo -n 'Not running. '
        return 0
    fi

    # wait until really stopped.
    # it might happen that promlens has a subprocess which
    # is left running and becomes ppid 1 after killing the
    # main promlens process. So fetch the process id again
    # multiple times to fetch new processes until all are gone.
    if [ -n "${pid:-}" ]; then
        I=0
        while kill -0 ${pid:-} >/dev/null 2>&1; do
            # Send single kill per process
            kill $pid
            while kill -0 ${pid:-} >/dev/null 2>&1;  do
                if [ $I = '60' ]; then
                    return 1
                else
                    echo -n "."
                    I=$(($I+1))
                    sleep 1
                fi
            done
            # Is there another proc with ppid 1?
            pid=$(pidof_promlens | head -n1) || true
        done
    fi

    [ -f "$PID_FILE" ] && rm -f "$PID_FILE"
    return 0

}

promlens_wait_start() {
    nohup $BIN $OPTIONS >>$LOGFILE 2>&1 &
    I=0
    while ! pidof_promlens >/dev/null 2>&1;  do
        if [ $I = '10' ]; then
            return 1
        else
            echo -n "."
            I=$(($I+1))
            sleep 1
        fi
    done

    return 0
}

if [ ! -f $BIN ]; then
    echo "Promlens binary $BIN not found. Terminating..."
    exit 1
fi

__init_hook $0 $1 pre
# OMD: create configuration file out of fragments
#case "$1" in start|restart|reload|checkconfig|check)
#    rebuild_config
#    if [ ! -f $CFG_FILE ]; then
#        echo "Prometheus configuration file $CFG_FILE not found. Terminating..."
#        exit 1
#    fi
#esac
case "$1" in
    start)
        echo -n "Starting promlens..."
        if pidof_promlens >/dev/null 2>&1; then
            echo 'Already running.'
            exit 1
        fi

        if promlens_wait_start; then
            echo 'OK'
            __init_hook $0 $1 post 0
            exit 0
        else
            echo 'ERROR'
            __init_hook $0 $1 post 1
            exit 1
        fi
    ;;
    stop)
        echo -n "Stopping promlens..."
        if promlens_wait_stop; then
            echo 'OK'
             __init_hook $0 $1 post 0
            exit 0
        else
            echo 'ERROR'
             __init_hook $0 $1 post 1
            exit 1
        fi
    ;;
    check|checkconfig)
        echo 'OK nothing to do for me'
        exit 0
    ;;
    status)
        PID=$(pidof_promlens 2>&1) || true
        if kill -0 "${PID:-}" >/dev/null 2>&1; then
            echo "Running ($PID)."
            exit 0
        else
            echo 'Not running. '
            exit 1
        fi
    ;;
    restart)
        #if ! verify_config quiet; then
        #    exit 1
        #fi

        $0 stop || (echo "Unable to stop Promlens. Terminating..." && exit 1)
        echo -n "Starting Promlens..."
        if promlens_wait_start; then
            echo 'OK'
            exit 0
        else
            echo 'ERROR'
            exit 1
        fi
    ;;

    reload|force-reload)
        PID=$(pidof_promlens 2>&1) || true
        if kill -0 "${PID:-}" >/dev/null 2>&1; then
            kill -HUP $PID
            exit 0
        else
            exit 1
        fi
    ;;
    *)
        echo "Usage: promlens {start|stop|restart|reload|status|checkconfig}"
        exit 2
    ;;
esac

# EOF
