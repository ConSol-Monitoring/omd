#!/bin/bash

### OMD INIT INFO
# PIDFILE:  tmp/run/prometheus.pid
# DEPENDS:  CONFIG_PROMETHEUS = on
# BINARY:   bin/prometheus
# ARGMATCH: web.listen-address
### END INIT INFO

cd || exit 1
. etc/omd/site.conf
[ "$CONFIG_PROMETHEUS" = "on" ] || exit 5
. .profile
. lib/omd/init_profile

mkdir -p $OMD_ROOT/tmp/prometheus
mkdir -p $OMD_ROOT/var/prometheus
DAEMON=$OMD_ROOT/bin/prometheus
TOOL=$OMD_ROOT/bin/promtool
CFG_FILE=$OMD_ROOT/tmp/prometheus/prometheus.yml
LOG_DIR=$OMD_ROOT/var/prometheus
LOG_FILE=$OMD_ROOT/var/prometheus/prometheus.log
DATA_DIR=$OMD_ROOT/var/prometheus/data
PID_FILE=$OMD_ROOT/tmp/run/prometheus.pid
NOHUP=1
STORE_PID=1
CHECK_CALLBACK=verify_config

# You can set the environment variable CORE_NOVERIFY=yes
# in order to supress a verification of the prometheus configuration
# in case of start, restart or reload. This is in order to
# avoid duplicate effort when being called by cmk -R or
# cmk -O.
# export CORE_NOVERIFY=yes

EXTERNAL_FQDN=${OMD_EXTERNAL_FQDN:-$(hostname --fqdn)}

OPTIONS=()
# The following two are needed to be at the beginning
# They are used to identify the process in prometheus_proc()
OPTIONS+=(--config.file="$CFG_FILE")
OPTIONS+=(--storage.tsdb.path="$DATA_DIR")

OPTIONS+=(--web.listen-address=$CONFIG_PROMETHEUS_TCP_ADDR:$CONFIG_PROMETHEUS_TCP_PORT)
OPTIONS+=(--web.external-url=http://${EXTERNAL_FQDN}/$OMD_SITE/prometheus)
OPTIONS+=(--web.console.libraries=/omd/sites/demo/etc/prometheus/console_libraries)
OPTIONS+=(--web.console.templates=/omd/sites/demo/etc/prometheus/consoles)
OPTIONS+=(--storage.tsdb.retention.time=${CONFIG_PROMETHEUS_RETENTION}d)

if [ -r $OMD_ROOT/etc/prometheus/webconfig.yml ]; then
    # https://prometheus.io/docs/prometheus/latest/configuration/https/
    OPTIONS+=(--web.config.file=$OMD_ROOT/etc/prometheus/webconfig.yml)
fi

OPTS="${OPTIONS[@]}"

# Put together fragments and build a new prometheus.yml
rebuild_config() {
    cp $OMD_ROOT/etc/prometheus/prometheus.yml $CFG_FILE
    WORK_CFG=$OMD_ROOT/tmp/prometheus.yml.$$
    if grep -q "# - start of rule files" $CFG_FILE && grep -q "# - end of rule files" $CFG_FILE; then
        cat $CFG_FILE |\
            sed -n '1,/# - start of rule files/p' > $WORK_CFG
        # all files in etc/prometheus/prometheus.d/rules/*/*.yml
        for rules in $OMD_ROOT/etc/prometheus/prometheus.d/rules/*.yml
        do
            [ -f $rules ] && echo "  - $rules" >> $WORK_CFG
        done
        for rules in $OMD_ROOT/etc/prometheus/prometheus.d/rules/*
        do
            if [ -d $rules ]; then
                for subrules in ${rules}/*.yml
                do
                    [ -f $subrules ] && echo "  - $subrules" >> $WORK_CFG
                done
            fi
        done
        cat $CFG_FILE |\
            sed -n '/# - end of rule files/,$p' >> $WORK_CFG
        cp $WORK_CFG $CFG_FILE
    fi

    if grep -q "# - start of scrape configs" $CFG_FILE && grep -q "# - end of scrape configs" $CFG_FILE; then
        cat $CFG_FILE |\
            sed -n '1,/# - start of scrape configs/p' > $WORK_CFG
        # all files in etc/prometheus/prometheus.d/scrape_configs/*.yml
        for scrapes in $OMD_ROOT/etc/prometheus/prometheus.d/scrape_configs/*.yml
        do
            echo >> $WORK_CFG
            [ -f $scrapes ] && cat "$scrapes" >> $WORK_CFG
        done
        for scrapes in $OMD_ROOT/etc/prometheus/prometheus.d/scrape_configs/*
        do
            if [ -d $scrapes ]; then
                for subscrapes in ${scrapes}/*.yml
                do
                    [ -f $subscrapes ] && cat "$subscrapes" >> $WORK_CFG
                done
            fi
        done
        cat $CFG_FILE |\
            sed -n '/# - end of scrape configs/,$p' >> $WORK_CFG
        cp $WORK_CFG $CFG_FILE
    fi

    if ! grep -q "alertmanagers:" $CFG_FILE; then
        if [ "$CONFIG_ALERTMANAGER" = "on" ]; then
            echo >> $CFG_FILE
            echo '# Alertmanager configuration' >> $CFG_FILE
            echo 'alerting:' >> $CFG_FILE
            echo '  alertmanagers:' >> $CFG_FILE

            # access always via localhost -> always http
            echo '  - scheme: http' >> $CFG_FILE
            echo "    path_prefix: /$OMD_SITE/alertmanager" >> $CFG_FILE
            echo '    static_configs:' >> $CFG_FILE
            echo '    - targets:' >> $CFG_FILE
            echo "      - $CONFIG_ALERTMANAGER_TCP_ADDR:$CONFIG_ALERTMANAGER_TCP_PORT" >> $CFG_FILE
        fi
    fi

    sed -ri "s&""#""#""#ROOT#""#""#""&$OMD_ROOT&g" $CFG_FILE
    sed -ri "s&""#""#""#SITE#""#""#""&$OMD_SITE&g" $CFG_FILE

    # replace ###VAR### variables from env variable CONFIG_VAR
    for var in "${!CONFIG_@}"; do
        sed -ri "s/###${var#CONFIG_}###/${!var}/g" $CFG_FILE
    done

    rm -f "$WORK_CFG"
}

verify_config() {
    if [ "$1" != "quiet" ]; then
        echo -n "Running configuration check... "
    fi
    RESULT=$($TOOL check config $CFG_FILE 2>&1)
    if [ $? -eq 0 ]; then
        if [ "$1" != "quiet" ]; then
            echo "done."
            echo "$RESULT" >&2
        fi
        return 0
    else
        if [ "$1" != "quiet" ]; then
            echo "CONFIG ERROR! Aborted. Check your Prometheus configuration."
        fi
        echo "$RESULT" >&2
        return 1
    fi
}

# OMD: create configuration file out of fragments
case "$1" in start|restart|reload|checkconfig|check)
    rebuild_config
    if [ ! -f $CFG_FILE ]; then
        echo "Prometheus configuration file $CFG_FILE not found. Terminating..."
        exit 1
    fi
esac

__generic_init "$*"
