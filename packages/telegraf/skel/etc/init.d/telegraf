#!/bin/bash

# chkconfig: 345 99 01
# decription: Telegraf

### BEGIN INIT INFO
# Provides:          telegraf
# Required-Start:    $local_fs
# Required-Stop:     $local_fs
# Should-Start:
# Should-Stop:
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start/Stop telegraf
### END INIT INFO

# Author: Matthias Gallinger <matthias.gallinger@consol.de>

cd || exit 1
. .profile
. lib/omd/init_profile
. etc/omd/site.conf

#if [ "$CONFIG_TELEGRAF" != "on" ] ; then
#    exit 5
#fi

INSTANCE=${0##*-}
export INSTANCE

if ! [ -f "$OMD_ROOT/etc/init.d/telegraf-$INSTANCE" ]; then
    if [ -f "$OMD_ROOT/etc/init.d/telegraf-default" ]; then
        export INSTANCE="default"
    else
        echo call ~/etc/init.d/telegraf-[instance] instead >&2
        exit 11
    fi
fi

NAME=telegraf
DAEMON="$OMD_ROOT/local/bin/telegraf"
PIDFILE="$OMD_ROOT/tmp/run/telegraf-$INSTANCE.pid"
LOGFILE="$OMD_ROOT/var/log/telegraf/telegraf-$INSTANCE.log"
CFG_DIR="$OMD_ROOT/etc/telegraf/telegraf-$INSTANCE.d"
CFG_FILE="$OMD_ROOT/etc/telegraf/telegraf-$INSTANCE.conf"
OPTIONS="--config $CFG_FILE --config-directory $CFG_DIR --pidfile $PIDFILE"

unset LANG
export LC_ALL=C

mkdir -p $CFG_DIR

PORT=CONFIG_TELEGRAF_TCP_PORT_${INSTANCE^^}
PORT=${!PORT}

get_pid() {
        PID=$( cat $PIDFILE 2>/dev/null )
        if [ "$PID" != "" ]; then
            PROC=$(ps -fp "$PID" 2>/dev/null | grep -c telegraf)
            if [ "$PROC" -gt 0 ]; then
                echo "$PID"
                return 0;
            fi
        fi
        return 1;
}

pidof_telegraf() {
    get_pid
    return $?
}

stop_telegraf() {
    PID=$(pidof_telegraf) || true
    if ! kill -0 "${PID:-}" >/dev/null 2>&1; then
        echo -n ". Not running."
        return 0
    fi

    if [ -n "${PID:-}" ]; then
        I=0
        while kill -0 ${PID:-} >/dev/null 2>&1; do
            kill -INT $PID
            while kill -0 ${PID:-} >/dev/null 2>&1; do
                if [ $I = '30' ]; then
                    return 1
                else
                    echo -n "."
                    I=$(($I+1))
                    sleep 2
                fi
            done
        done
    fi
    [ -f "$PIDFILE" ] && rm -f "$PIDFILE"
    return 0
}

start_telegraf() {
    nohup $DAEMON $OPTIONS >>$LOGFILE 2>&1 &
    echo $! > $PIDFILE
    I=0
    sleep 2
    while ! pidof_telegraf >/dev/null 2>&1; do
        if [ $I = '5' ]; then
            return 1
        else
            echo -n "."
            I=$(($I+1))
            sleep 1
        fi
    done
    return 0
}

if [ ! -f $DAEMON ]; then
    echo "$NAME binary $DAEMON not found, Terminating..."
    exit 1
fi

__init_hook $0 $1 pre
case "$1" in
    start)
        printf '%s' "Starting $NAME..."
        if pidof_telegraf > /dev/null  2>&1; then
            echo "failed"
            echo "$NAME already running"
            exit 1;
        fi

        # remove memory limits which cause startup problems
        ulimit -m unlimited >/dev/null 2>&1
        ulimit -v unlimited >/dev/null 2>&1

        if start_telegraf; then
            echo 'OK'
            __init_hook $0 $1 post 0
            exit 0
        else
            echo 'ERROR'
            __init_hook $0 $1 post 1
            exit 1
        fi
        ;;
    stop)
        printf '%s' "Stopping $NAME..."
        if stop_telegraf; then
            echo 'OK'
            __init_hook $0 $1 post 0
            exit 0
        else
            echo 'ERROR'
            __init_hook $0 $1 post 1
            exit 1
        fi
        ;;
    reload|force-reload)
        printf '%s' "Reloading $NAME configuration files..."
        if [ pidof_telegraf ]; then
            PID=$(pidof_telegraf)
            kill -HUP ${PID:-}
            echo "done"
            exit 0
        else
            echo "$NAME is not running"
            exit 1;
        fi
    ;;
    status)
        PID=$(pidof_telegraf) || true
        if kill -0 "${PID:-}" >/dev/null 2>&1; then
            echo "Running ($PID)."
            exit 0
        else
            echo "Not running."
            exit 1
        fi
    ;;
    restart)
        $0 stop && sleep 1
        $0 start
        exit $?
        ;;
    check)
        ;;
    *)
        echo "Usage: $NAME {start|stop|status|restart|reload}"
        exit 1
        ;;
esac

exit 0
