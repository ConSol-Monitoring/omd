#!/usr/bin/python3


import argparse
import nagiosplugin
import logging
import smbc
import time

_log = logging.getLogger('nagiosplugin')


class SmbConnectSummary(nagiosplugin.Summary):
    def __init__(self, file):
        self.share = file

    def problem(self, results):
        return results

    def ok(self, results):
        return "connected to share %s in %.4fs" % (self.share, results[0].metric.value)


class SmbCopySummary(nagiosplugin.Summary):
    def __init__(self, file):
        self.file = file

    def output(self, results):
        if str(results.most_significant_state) == "unknown":
            # won't have perf values, so special handling 
            return results.most_significant[0].hint.splitlines()[0]
        return "file %s (%dMB) was transferred in %.4fs (%.2fMB/s)" % \
            (self.file,
            (results["file_size"].metric.value) / 1048576,
            results["transfer_time"].metric.value,
            results["transfer_speed"].metric.value)


    def ok(self, results):
        return self.output(results)

    def warning(self, results):
        return self.output(results)

    def critical(self, results):
        return self.output(results)

    def unknown(self, results):
        return self.output(results)

    def empty(self, results):
        return self.output(results)

    def problem(self, results):
        return self.output(results)

class Smb(nagiosplugin.Resource):

    def __init__(self, mode, user, password, domain, server, share, file):
        try:
            self.mode = mode
            if self.mode == "connection-time":
                self.unc_server = "smb://" + server
                self.unc_share = "smb://" + server + "/" + share
            else:
                self.unc_share = "smb://" + server + "/" + share
                self.unc_file = "smb://" + server + "/" + share + "/" + file

            self.auth_fn = None
            if user:
                    self.auth_fn = lambda e, sh, wg, us, pw: (domain, user, password)
        except Exception as exp:
            raise nagiosplugin.CheckError(exp.__str__())

    def probe(self):
        #_log.warning('list share contents')
        try:
            if self.auth_fn:
                self.context = smbc.Context(auth_fn=self.auth_fn)
            else:
                self.context = smbc.Context()
            _log.debug("created context")
            if self.mode == "connection-time":
                tic = time.time()
                _log.debug("dir " + self.unc_share)
                dir = self.context.opendir(self.unc_share)
                entries = dir.getdents()
                #for entry in entries:
                #    print entry
                tac = time.time()
                self.time_connect = tac - tic
                self.context = None
                yield nagiosplugin.Metric('connect', self.time_connect, min=0, context='connect')
            elif self.mode == "read-file":
                tic = time.time()
                file = self.context.open(self.unc_file)
                tac = time.time()
                self.time_open = tac - tic
                tic = time.time()
                contents = file.read()
                tac = time.time()
                self.time_read = tac - tic
                file.close()
                size = len(contents)
                self.context = None
                yield nagiosplugin.Metric('file_size', size, min=0, context='file_size')
                yield nagiosplugin.Metric('transfer_time', self.time_read + self.time_open, min=0, context='transfer_time')
                yield nagiosplugin.Metric('read_time', self.time_read, min=0, context='read_time')
                yield nagiosplugin.Metric('open_time', self.time_open, min=0, context='open_time')
                yield nagiosplugin.Metric('transfer_speed', (size / 1048576) / self.time_read + self.time_open, context='transfer_speed')
        except Exception as exp:
            # The exception may be hidden, nagiosplugin is catching it, and may
            # raise a different exception further down the road, so we don't know
            # anymore what went wrong in the first place
            import traceback, sys
            sys.stderr.write(traceback.format_exc())
            raise nagiosplugin.CheckError(exp.__str__())


#@nagiosplugin.guarded
def main():
    argp = argparse.ArgumentParser()
    argp.add_argument('-u', '--user', action='store')
    argp.add_argument('-p', '--password', action='store')
    argp.add_argument('-d', '--domain', action='store')
    argp.add_argument('-s', '--server', action='store')
    argp.add_argument('-x', '--share', action='store')
    argp.add_argument('-f', '--file', action='store')
    argp.add_argument('-m', '--mode', action='store', default='connection-time')
    argp.add_argument('-w', '--warning', type=str, action='store')
    argp.add_argument('-c', '--critical', type=str, action='store')
    argp.add_argument('--warning_speed', type=str, action='store')
    argp.add_argument('--critical_speed', type=str, action='store')
    argp.add_argument('-t', '--timeout', action='store', default=60)
    argp.add_argument('-v', '--verbose', action='count', default=0)
    args = argp.parse_args()
    check = nagiosplugin.Check()
    check.add(
        Smb(args.mode, args.user, args.password, args.domain,
            args.server, args.share, args.file)
    )

    if args.mode == "connection-time":
        check.add(
            nagiosplugin.ScalarContext('connect', args.warning, args.critical,
                fmt_metric='{value}'),
            SmbConnectSummary(args.share)
        )
    elif args.mode == "read-file":
        check.add(
            nagiosplugin.ScalarContext('file_size',
                fmt_metric='%dMB'),
            nagiosplugin.ScalarContext('open_time',
                fmt_metric='%.2f to open'),
            nagiosplugin.ScalarContext('read_time',
                fmt_metric='%.2f to read'),
            nagiosplugin.ScalarContext('transfer_time', args.warning, args.critical),
            nagiosplugin.ScalarContext('transfer_speed', args.warning_speed, args.critical_speed),
            SmbCopySummary(args.file)
        )

    check.main(args.verbose, args.timeout)

if __name__ == '__main__':
    main()

