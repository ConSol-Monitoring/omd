define command {
    command_name	check_ssh_controlmaster
    command_line        $USER1$/check_ssh_controlmaster \
        -H $HOSTADDRESS$ \
        -p $_HOSTSSHPORT$ \
        -l $_HOSTSSHUSER$ \
        -c $USER4$/tmp/run/ssh \
        -s $TOTALHOSTSERVICES$ \
        -m 10 \
        -P
        # -c = the directory for the controlmaster sockets
        # -m = number of max. parallel sessions through 1 ssh
        # -P = check first if the host can be pinged
        # -s the number of services which will (at max) use the controlmaster.
        #    look inside check_ssh_controlmaster to find an explanation
}

define command {
    command_name	check_by_ssh
    command_line	$USER1$/check_by_ssh \
        --host $HOSTADDRESS$ \
        --port $_HOSTSSHPORT$ \
        --logname $_HOSTSSHUSER$ \
        --timeout $ARG1$ \
        --ssh-option "ControlPath=$USER4$/tmp/run/ssh/controlpath/ssh-%r@%h.$$(($$RANDOM% $$(cat ~/tmp/run/ssh/controlpath/ssh-$_HOSTSSHUSER$@$HOSTADDRESS$.info||echo 1) ))" \
        --ssh-option "ControlMaster=no" \
        --ssh-option "UserKnownHostsFile=$USER4$/tmp/run/ssh/known_hosts" \
        --ssh-option "IdentityFile=$USER4$/.ssh/id_rsa" \
        --ssh-option "IdentitiesOnly=yes" \
        --ssh-option "StrictHostKeyChecking=no" \
        --ssh-option "PreferredAuthentications=publickey" \
        --ssh-option "PasswordAuthentication=no" \
        --ssh-option "NumberOfPasswordPrompts=0" \
        --skip-stderr 1 \
        --command "$ARG2$" \
        2>&1
}

define command {
    command_name	check_host_alive
    command_line	$USER1$/check_icmp -H $HOSTADDRESS$ \
        -w 3000.0,80% \
        -c 5000.0,100% \
        -p 5
}

define command {
    command_name	plugin_rollout_linux
    command_line	ANSIBLE_CONFIG=$USER4$/etc/ansible/ansible.cfg.pr \
        ansible-playbook --inventory="$HOSTADDRESS$," \
        $USER4$/etc/ansible/playbooks/plugins_rollout/plugins_rollout_linux.yaml
}

define command {
    command_name	check_nsc_web
    command_line	$USER1$/check_nsc_web \
        -u https://$HOSTADDRESS$:$_HOSTNSCPORT$ \
        -p '$_HOSTNSCPASSWORD$' -k -t $ARG1$ $ARG2$ $ARG3$
}

define command{
    command_name    linux_version
    command_line    $USER4$/bin/ansible -u qqnagio -m raw -a 'cat /etc/*-release' -i "$HOSTADDRESS$," all | egrep 'UNREACHABLE!|^SUSE Linux|^VERSION =|^PATCHLEVEL =|^Red Hat|^CentOS' | tr -d '|' | uniq
}

define command {
    command_name        execute
    command_line        $ARG1$
}

define command {
  command_name                   check_nwc_health_v2
  command_line                   $USER1$/check_nwc_health \
      --hostname $HOSTADDRESS$ \
      --timeout $ARG1$ \
      --community '$_HOSTCOMMUNITY$' \
      --mode $ARG2$ \
      $ARG3$
}

define command {
  command_name                   check_ups_health_v2
  command_line                   $USER1$/check_ups_health \
      --hostname $HOSTADDRESS$ \
      --timeout $ARG1$ \
      --community '$_HOSTCOMMUNITY$' \
      --mode $ARG2$ \
      $ARG3$
}

define command {
  command_name                   check_pdu_health_v2
  command_line                   $USER1$/check_pdu_health \
      --hostname $HOSTADDRESS$ \
      --timeout $ARG1$ \
      --community '$_HOSTCOMMUNITY$' \
      --mode $ARG2$ \
      $ARG3$
}

define command {
  command_name                   check_tl_health_v2
  command_line                   $USER1$/check_tl_health \
      --hostname $HOSTADDRESS$ \
      --timeout $ARG1$ \
      --community '$_HOSTCOMMUNITY$' \
      --mode $ARG2$ \
      $ARG3$
}

define command {
  command_name                   check_wut_health_v2
  command_line                   $USER1$/check_wut_health \
      --hostname $HOSTADDRESS$ \
      --timeout $ARG1$ \
      --community '$_HOSTCOMMUNITY$' \
      --mode $ARG2$ \
      $ARG3$
}

define command {
  command_name                   check_rittal_health_v2
  command_line                   $USER1$/check_rittal_health \
      --hostname $HOSTADDRESS$ \
      --timeout $ARG1$ \
      --community '$_HOSTCOMMUNITY$' \
      --mode $ARG2$ \
      $ARG3$
}

define command {
  command_name                   notify_by_nothing
  command_line                   $USER1$/check_dummy!0
}

# bei service, der am traphost haengt und nach oids einer mib sucht, die treffer dann mit
# hilfe des Hostinfo.pm an passive checks verteilt
define command{
        command_name    snmptt_check_logfiles_mib_traps
        command_line    $USER1$/check_logfiles --timeout $ARG1$ --config '$ARG2$'
}

define command{
        command_name    snmptt_check_logfiles_cmdline
        command_line    $USER1$/check_logfiles --timeout $ARG1$ --logfile '$ARG2$' --criticalpattern '$ARG3$' $ARG4$
}

define command{
        command_name    snmptt_check_logfiles_config
        command_line    $USER1$/check_logfiles --timeout $ARG1$ --config '$ARG2$'
}

define command{
        command_name    check_proc_snmptrapd
        command_line    $USER1$/check_procs -c 1: -w 1: -a '/usr/sbin/snmptrapd -ObentU -C -c /omd/sites/$USER3$/etc/snmptrapd.conf'
}

