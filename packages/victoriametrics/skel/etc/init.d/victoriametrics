#!/bin/bash

### OMD INIT INFO
# PIDFILE:  tmp/run/victoriametrics.pid
# DEPENDS:  CONFIG_VICTORIAMETRICS = on
# BINARY:   bin/victoria-metrics-prod
# ARGMATCH: httpListenAddr
### END INIT INFO

cd || exit 1
. etc/omd/site.conf
[ "$CONFIG_VICTORIAMETRICS" = "on" ] || exit 5
. .profile
. lib/omd/init_profile

NAME=victoriametrics
DAEMON=$OMD_ROOT/bin/victoria-metrics-prod
NOHUP=1
RELOAD_RESTARTS=1
STORE_PID=1
LOG_FILE=$OMD_ROOT/var/victoriametrics/victoriametrics.log
PID_FILE=$OMD_ROOT/tmp/run/victoriametrics.pid
DATA_DIR=$OMD_ROOT/var/victoriametrics/data
CONF_DIR=$OMD_ROOT/etc/victoriametrics/conf.d
AUTH_CONF_FILE=${OMD_ROOT}/etc/victoriametrics/conf.d/auto_auth.conf

mkdir -p \
    ${DATA_DIR} \
    ${OMD_ROOT}/var/victoriametrics

export LC_ALL=C

case "$1" in start|restart|reload|checkconfig|check)
  # generate random passwords
  if [ ! -f ${AUTH_CONF_FILE} ]; then
    # use existing ones if available
    if [ -f etc/victoriametrics/victoriametrics.conf.migrated.to.conf.d ]; then
      . etc/victoriametrics/victoriametrics.conf.migrated.to.conf.d
    fi
    httpAuth_username=${vm_httpAuth_username:-prom}
    httpAuth_password=${vm_httpAuth_password:-$( tr -cd A-Za-z0-9 < /dev/urandom | head -c 16 )}
    snapshotAuthKey=${vm_snapshotAuthKey:-$( tr -cd A-Za-z0-9 < /dev/urandom | head -c 16 )}
    metricsAuthKey=${vm_metricsAuthKey:-metrics}
    cat << EOT > ${AUTH_CONF_FILE}
# this file is generated automatically, do not change manually. Changes will be overwritten.
vm_httpAuth_username=${httpAuth_username}
vm_httpAuth_password=${httpAuth_password}
vm_metricsAuthKey=${metricsAuthKey}
vm_snapshotAuthKey=${snapshotAuthKey}
EOT
    echo "created ${AUTH_CONF_FILE} with random passwords, for remote access check this file"

    if [ -f ${OMD_ROOT}/etc/victoriametrics/grafana_datasources.yml ] ; then
      sed -e "s/basicAuthPassword: .*/basicAuthPassword: ${httpAuth_password}/; s/basicAuthUser: .*/basicAuthUser: prom/" -i ${OMD_ROOT}/etc/victoriametrics/grafana_datasources.yml
      if omd status grafana > /dev/null 2>&1 ; then
        omd restart grafana
      fi
      echo "patched password in grafana_datasources.yml"
    fi
  fi
esac

# export every parameter that is set after this line
set -a
# default parameters maybe overwritten
# the following parameter cannot be overwritten:
# - retentionPeriod, httpListenAddr (from omd config) and
# - storageDataPath (fix)

vm_selfScrapeInstance="$(uname -n)-$(id -un)"

for CFG in ${CONF_DIR}/*.conf; do
  . ${CFG}
done

# base options to identify instance
OPTS=""
OPTS+=" -envflag.enable"
OPTS+=" -envflag.prefix=vm_"
OPTS+=" -httpListenAddr=$CONFIG_VICTORIAMETRICS_TCP_ADDR:$CONFIG_VICTORIAMETRICS_PORT"
OPTS+=" -storageDataPath=$DATA_DIR"

# unset relabelConfig if file is not there
[ -r "$vm_relabelConfig" ] || unset vm_relabelConfig

if [ "${CONFIG_VICTORIAMETRICS_MODE}" = "ssl" ] ; then
  if [  -z "$vm_tlsCertFile" ] ; then echo "vm_tlsCertFile missing"; exit 8; fi
  if [  -z "$vm_tlsKeyFile" ] ; then echo "vm_tlsKeyFile missing"; exit 8; fi
  if [ ! -f $vm_tlsCertFile ] ; then echo $vm_tlsCertFile does not exist; exit 8; fi
  if [ ! -f $vm_tlsKeyFile ] ; then echo $vm_tlsKeyFile does not exist; exit 8; fi
  export vm_tls=1
else
  unset vm_tls
  unset vm_tlsCertFile
  unset vm_tlsKeyFile
fi

if [ "$( printf '%s' "${vm_dedup_minScrapeInterval}" | tr -cd 1-9 )" = "" ] ; then
  # export must be removed, otherwise used via env!
  unset vm_dedup_minScrapeInterval
fi

set +a # stop that behavior again

__generic_init "$*"
