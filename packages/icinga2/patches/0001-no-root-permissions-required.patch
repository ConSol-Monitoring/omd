--- a/icinga-app/icinga.cpp	2018-10-02 13:50:28.355916250 +0200
+++ b/icinga-app/icinga.cpp	2018-10-02 14:21:58.344916567 +0200
@@ -142,12 +142,12 @@
 		Log(LogWarning, "icinga-app", "Registry key could not be read. Falling back to built-in paths.");
 
 #endif /* _WIN32 */
-		Application::DeclarePrefixDir(ICINGA_PREFIX);
-		Application::DeclareSysconfDir(ICINGA_SYSCONFDIR);
-		Application::DeclareRunDir(ICINGA_RUNDIR);
-		Application::DeclareLocalStateDir(ICINGA_LOCALSTATEDIR);
-		Application::DeclarePkgDataDir(ICINGA_PKGDATADIR);
-		Application::DeclareIncludeConfDir(ICINGA_INCLUDECONFDIR);
+		Application::DeclarePrefixDir(std::string(getenv("OMD_ROOT")));
+		Application::DeclareSysconfDir(std::string(getenv("OMD_ROOT")) + "/etc");
+		Application::DeclareRunDir(std::string(getenv("OMD_ROOT")) + "/tmp/icinga2");
+		Application::DeclareLocalStateDir(std::string(getenv("OMD_ROOT")) + "/var/icinga2");
+		Application::DeclarePkgDataDir(std::string(getenv("OMD_ROOT")) + "/share/icinga2");
+		Application::DeclareIncludeConfDir(std::string(getenv("OMD_ROOT")) + "/share/icinga2/include");
 #ifdef _WIN32
 	}
 #endif /* _WIN32 */
@@ -366,9 +366,9 @@
 
 	Application::DeclareStatePath(Application::GetLocalStateDir() + "/lib/icinga2/icinga2.state");
 	Application::DeclareModAttrPath(Application::GetLocalStateDir() + "/lib/icinga2/modified-attributes.conf");
-	Application::DeclareObjectsPath(Application::GetLocalStateDir() + "/cache/icinga2/icinga2.debug");
-	Application::DeclareVarsPath(Application::GetLocalStateDir() + "/cache/icinga2/icinga2.vars");
-	Application::DeclarePidPath(Application::GetRunDir() + "/icinga2/icinga2.pid");
+	Application::DeclareObjectsPath(std::string(getenv("OMD_ROOT")) + "/tmp/icinga2/icinga2.debug");
+	Application::DeclareVarsPath(std::string(getenv("OMD_ROOT")) + "/tmp/icinga2/icinga2.vars");
+	Application::DeclarePidPath(std::string(getenv("OMD_ROOT")) + "/tmp/run/icinga2.pid");
 
 	ConfigCompiler::AddIncludeSearchDir(Application::GetIncludeConfDir());
 
@@ -475,10 +475,10 @@
 		Logger::DisableTimestamp();
 #ifndef _WIN32
 		if (command->GetImpersonationLevel() == ImpersonateRoot) {
-			if (getuid() != 0) {
-				Log(LogCritical, "cli", "This command must be run as root.");
-				return 0;
-			}
+			//if (getuid() != 0) {
+			//	Log(LogCritical, "cli", "This command must be run as root.");
+			//	return 0;
+			//}
 		} else if (command && command->GetImpersonationLevel() == ImpersonateIcinga) {
 			String group = Application::GetRunAsGroup();
 			String user = Application::GetRunAsUser();
@@ -498,21 +498,21 @@
 				}
 			}
 
-			if (getgid() != gr->gr_gid) {
-				if (!vm.count("reload-internal") && setgroups(0, nullptr) < 0) {
-					Log(LogCritical, "cli")
-						<< "setgroups() failed with error code " << errno << ", \"" << Utility::FormatErrorNumber(errno) << "\"";
-					Log(LogCritical, "cli")
-						<< "Please re-run this command as a privileged user or using the \"" << user << "\" account.";
-					return EXIT_FAILURE;
-				}
-
-				if (setgid(gr->gr_gid) < 0) {
-					Log(LogCritical, "cli")
-						<< "setgid() failed with error code " << errno << ", \"" << Utility::FormatErrorNumber(errno) << "\"";
-					return EXIT_FAILURE;
-				}
-			}
+			//if (getgid() != gr->gr_gid) {
+			//	if (!vm.count("reload-internal") && setgroups(0, nullptr) < 0) {
+			//		Log(LogCritical, "cli")
+			//			<< "setgroups() failed with error code " << errno << ", \"" << Utility::FormatErrorNumber(errno) << "\"";
+			//		Log(LogCritical, "cli")
+			//			<< "Please re-run this command as a privileged user or using the \"" << user << "\" account.";
+			//		return EXIT_FAILURE;
+			//	}
+
+			//	if (setgid(gr->gr_gid) < 0) {
+			//		Log(LogCritical, "cli")
+			//			<< "setgid() failed with error code " << errno << ", \"" << Utility::FormatErrorNumber(errno) << "\"";
+			//		return EXIT_FAILURE;
+			//	}
+			//}
 
 			errno = 0;
 			struct passwd *pw = getpwnam(user.CStr());
@@ -530,23 +530,23 @@
 			}
 
 			// also activate the additional groups the configured user is member of
-			if (getuid() != pw->pw_uid) {
-				if (!vm.count("reload-internal") && initgroups(user.CStr(), pw->pw_gid) < 0) {
-					Log(LogCritical, "cli")
-						<< "initgroups() failed with error code " << errno << ", \"" << Utility::FormatErrorNumber(errno) << "\"";
-					Log(LogCritical, "cli")
-						<< "Please re-run this command as a privileged user or using the \"" << user << "\" account.";
-					return EXIT_FAILURE;
-				}
-
-				if (setuid(pw->pw_uid) < 0) {
-					Log(LogCritical, "cli")
-						<< "setuid() failed with error code " << errno << ", \"" << Utility::FormatErrorNumber(errno) << "\"";
-					Log(LogCritical, "cli")
-						<< "Please re-run this command as a privileged user or using the \"" << user << "\" account.";
-					return EXIT_FAILURE;
-				}
-			}
+			//if (getuid() != pw->pw_uid) {
+			//	if (!vm.count("reload-internal") && initgroups(user.CStr(), pw->pw_gid) < 0) {
+			//		Log(LogCritical, "cli")
+			//			<< "initgroups() failed with error code " << errno << ", \"" << Utility::FormatErrorNumber(errno) << "\"";
+			//		Log(LogCritical, "cli")
+			//			<< "Please re-run this command as a privileged user or using the \"" << user << "\" account.";
+			//		return EXIT_FAILURE;
+			//	}
+
+			//	if (setuid(pw->pw_uid) < 0) {
+			//		Log(LogCritical, "cli")
+			//			<< "setuid() failed with error code " << errno << ", \"" << Utility::FormatErrorNumber(errno) << "\"";
+			//		Log(LogCritical, "cli")
+			//			<< "Please re-run this command as a privileged user or using the \"" << user << "\" account.";
+			//		return EXIT_FAILURE;
+			//	}
+			//}
 		}
 
 		Process::InitializeSpawnHelper();
