#!/usr/bin/env perl

use strict;
use 5.010;
use LWP;
use JSON;
use URI::Escape;
use HTTP::Request::Common;
use Log::Log4perl qw(:easy);

Log::Log4perl->easy_init({
    level   => ($ENV{LOGLEVEL} // "ERROR"),
    file    => "STDERR",
});

chomp(my $grafana_port = qx(omd config show GRAFANA_TCP_PORT));
my $API_URL="http://127.0.0.1:${grafana_port}/api";
DEBUG "API_URL is $API_URL";

my $ua = LWP::UserAgent->new;
$ua->add_handler( request_prepare => \&_request_handler );

_dispatch_command(@ARGV);
_usage();
exit;

################################################################################
sub _dispatch_command {
    my($cmd, @args) = @_;
    return unless $cmd;
    if($cmd =~ /^users?$/mx) {
        _dispatch_command_user(@args);
    }
    if($cmd =~ /^user_org?$/mx) {
        _dispatch_command_user_org(@args);
    }
    if($cmd =~ /^orgs?$/mx) {
        _dispatch_command_orgs(@args);
    }
    if($cmd =~ /^datasources?|ds$/mx) {
        _dispatch_command_datasource(@args);
    }
    if($cmd =~ /^check?|c$/mx) {
        _dispatch_command_check(@args);
    }
}

################################################################################
sub _dispatch_command_user {
    my($action, @args) = @_;

    if(!$action || $action eq 'list') {
        my $grafana_users = grafana_get_users($ua);
        for my $name (sort keys %{$grafana_users}) {
            my $u    = $grafana_users->{$name};
            my $orgs = grafana_get_user_orgs($ua, $u->{'id'});
            printf("login: %-20s id: %-5s email: %-30s GrafanaAdmin: %-5s  orgs: %s\n",
                    $u->{'login'},
                    $u->{'id'},
                    $u->{'email'},
                    $u->{'isAdmin'} ? "yes" : "no",
                    join(", ", map( { $_->{'name'} } @{$orgs})),
            );
        }
        exit;
    }
    if($action eq 'add') {
        my($name, $email, $isAdmin) = @args;
        if(!$email || !$name) {
            print STDERR "Usage: grafanactl user add <name> <email> [<grafanaAdmin>]\n";
            exit 1;
        }
        my $grafana_users = grafana_get_users($ua);
        my $grafana_user = $grafana_users->{$name};
        if($grafana_user) {
            print STDERR "User $name does already exist.\n";
            exit 1;
        }
        my $grafana_user_id = grafana_create_user($ua, { name => $name, email => $email });
        print "user $name added successfully\n";
        exit;
    }
    if($action eq 'change') {
        my($name, $email, $isAdmin) = @args;
        if(!$email || !$name) {
            print STDERR "Usage: grafanactl user change <name> <email> [<grafanaAdmin>]\n";
            exit 1;
        }
        my $grafana_users = grafana_get_users($ua);
        my $grafana_user = $grafana_users->{$name};
        if(!$grafana_user) {
            print STDERR "User $name does not exist.\n";
            exit 1;
        }
        grafana_change_user($ua, { id => $grafana_user->{id}, name => $name, email => $email });
        if(defined $isAdmin) {
            grafana_set_user_is_admin($ua, $grafana_user, $isAdmin);
        }
        print "user $name changed successfully\n";
        exit;
    }
    if($action eq 'delete') {
        my($name) = @args;
        if(!$name) {
            print STDERR "Usage: grafanactl user delete <name>\n";
            exit 1;
        }
        my $grafana_users = grafana_get_users($ua);
        if(!$grafana_users->{$name}) {
            print "User $name does not exist.\n";
            exit 1;
        }
        # remove user completly
        my $j = grafana_delete_user($ua, $grafana_users->{$name}->{id});
        if($j) {
            print "user $name deleted successfully\n";
        }
        exit;
    }
}

################################################################################
sub _dispatch_command_user_org {
    my($action, @args) = @_;

    if($action eq 'list') {
        my($name) = @args;
        my $grafana_users = grafana_get_users($ua);
        my $grafana_user = $grafana_users->{$name};
        if(!$grafana_user) {
            print STDERR "User $name does not exist.\n";
            exit 1;
        }
        my $orgs = grafana_get_user_orgs($ua, $grafana_user->{'id'});
        for my $org (@{$orgs}) {
            my $u    = $grafana_users->{$name};
            my $orgs = grafana_get_user_orgs($ua, $u->{'id'});
            printf("org: %-20s id: %-5s role: %s\n",
                    $org->{'name'},
                    $org->{'orgId'},
                    $org->{'role'},
            );
        }
        exit;
    }
    if($action eq 'add') {
        my($name, $role, $org) = @args;
        if(!$org || !$role) {
            print STDERR "Usage: grafanactl user_org add <name> <role> <org>\n";
            exit 1;
        }
        if($role ne 'Admin' && $role ne 'Editor' && $role ne 'Viewer') {
            print STDERR "Error: supported roles are: Admin, Editor and Viewer\n";
            exit 1;
        }
        my $org_id = grafana_get_org_by_name($ua, $org);
        my $grafana_users = grafana_get_users($ua);
        my $grafana_user = $grafana_users->{$name};
        if(!$grafana_user) {
            print STDERR "User $name does not exist.\n";
            exit 1;
        }
        grafana_add_user_to_org($ua, $grafana_user, $org_id->{'id'}, $role);
        print "user $name added successfully to org $org as $role\n";
        exit;
    }
    if($action eq 'change') {
        my($name, $role, $org) = @args;
        if(!$org || !$role) {
            print STDERR "Usage: grafanactl user_org change <name> <role> <org>\n";
            exit 1;
        }
        if($role ne 'Admin' && $role ne 'Editor' && $role ne 'Viewer') {
            print STDERR "Error: supported roles are: Admin, Editor and Viewer\n";
            exit 1;
        }
        my $org_id = grafana_get_org_by_name($ua, $org);
        my $grafana_users = grafana_get_users($ua);
        my $grafana_user = $grafana_users->{$name};
        if(!$grafana_user) {
            print STDERR "User $name does not exist.\n";
            exit 1;
        }
        grafana_add_user_to_org($ua, $grafana_user, $org_id->{'id'}, $role);
        print "user $name change successfully to org $org as $role\n";
        exit;
    }
    if($action eq 'delete') {
        my($name, $org) = @args;
        if(!$name || !$org) {
            print STDERR "Usage: grafanactl user_org delete <name> <org>\n";
            exit 1;
        }
        my $grafana_users = grafana_get_users($ua);
        if(!$grafana_users->{$name}) {
            print "User $name does not exist.\n";
            exit 1;
        }
        my $orgs = grafana_get_orgs($ua);
        if(!$orgs->{$org}) {
            print "Org $org does not exist.\n";
            exit 1;
        }
        my $org_id = grafana_get_org_by_name($ua, $org);
        my $j = grafana_delete_user_org($ua, $grafana_users->{$name}->{id}, $org_id->{'id'});
        if($j) {
            print "user $name deleted successfully from $org\n";
        }
        exit;
    }
}

################################################################################
sub _dispatch_command_orgs {
    my($action, @args) = @_;
    if(!$action || $action eq 'list') {
        my $orgs = grafana_get_orgs($ua);
        for my $name (sort keys %{$orgs}) {
            my $o = $orgs->{$name};
            my $users = grafana_get_org_users($ua, $o->{'id'});
            printf("name: %-20s id:%-5s  users: %s\n",
                    $o->{'name'},
                    $o->{'id'},
                    join(",", keys %{$users}),
            );
        }
        exit;
    }
}

################################################################################
sub _dispatch_command_datasource {
    my($action, @args) = @_;
    if(!$action || $action eq 'list') {
        my $datasources = grafana_get_datasources($ua);
        for my $ds (sort { $a->{'id'} <=> $b->{'id'} } @{$datasources}) {
            printf("%-1s name: %-12s type: %-10s database: %-5s  access: %-8s url: %s \n",
                    $ds->{'isDefault'} ? '*' : '',
                    $ds->{'name'},
                    $ds->{'type'},
                    $ds->{'database'},
                    $ds->{'access'},
                    $ds->{'url'},
            );
        }
        exit;
    }
}

################################################################################
sub _dispatch_command_check {
    my($action, @args) = @_;

    my $r = $ua->get("${API_URL}/metrics");
    unless ( $r->is_success ){
        print "CRITICAL - " . $r->status_line;
        exit 2;
    };

    my $data = _parse_json($r);
    my $perf_data = "";
    foreach my $k (keys %$data){
        $perf_data .= sprintf("'$k'=%dc;;;; ", $data->{$k}->{count} )
    }
    print "OK - " . $r->status_line . " | $perf_data";
    exit 0;
}

################################################################################
sub _usage {
    print STDERR <<EOT;
Usage: grafanactl <command> <options>

Users:
       grafanactl user [list]
       grafanactl user add <name> <email> [<grafanaAdmin>]
       grafanactl user change <name> <email> [<grafanaAdmin>]
       grafanactl user delete <name>

Users in Organizations:
       grafanactl user_org list <username>
       grafanactl user_org add <username> <role> <org>
            # Role can be Admin, Editor or Viewer
       grafanactl user_org change <username> <role> <org>
       grafanactl user_org delete <username> [<org>]

Organizations:
       grafanactl org [list]

Datasources:
       grafanactl datasource [list]

Monitoring:
       grafanactl check

EOT
    exit 1;
}

################################################################################
sub grafana_get_orgs {
    my ($ua) = @_;
    my $r = $ua->request(GET "$API_URL/orgs");
    LOGDIE($r->status_line) unless $r->is_success;
    my $j = _parse_json($r);
    my $orgs = {};
    for my $o (@$j) {
        $orgs->{$o->{name}} = $o;
    }
    return $orgs;
}

################################################################################
sub grafana_get_org_by_name {
    my ($ua, $name) = @_;
    my $r = $ua->request(GET "$API_URL/orgs/name/".uri_escape($name));
    LOGDIE($r->status_line) unless $r->is_success;
    _parse_json($r);
}

################################################################################
sub grafana_get_org_users {
    my ($ua, $org_id) = @_;
    my $r = $ua->get("$API_URL/orgs/${org_id}/users");
    LOGDIE($r->status_line) unless $r->is_success;
    my $j = _parse_json($r);
    my $users = {};
    for my $u (@$j) {
        $users->{$u->{login}} = $u;
    }
    return $users;
}

################################################################################
sub grafana_add_user_to_org {
    my ($ua, $user, $org_id, $role) = @_;

    # Is user already in org?
    my $user_exists_in_org = defined grafana_get_org_users($ua, $org_id)->{$user->{'login'}};
    unless($user_exists_in_org) {
        DEBUG "User $user->{login} is not member of org/$org_id, add her";
        my $req = POST "$API_URL/orgs/${org_id}/users", Content=>JSON->new->encode({
            loginOrEmail => $user->{login},
            role         => $role,
        });
        my $r = $ua->request($req);
        LOGDIE($r->as_string) unless $r->is_success;
    }

    DEBUG "ensure that $user->{login} has the correct role";
    # User exists in org, edit role in org
    my $req = HTTP::Request->new("PATCH", "$API_URL/orgs/$org_id/users/$user->{id}");
    $req->content(JSON->new->encode({ role => $role }));
    my $r = $ua->request($req);
    LOGDIE($r->as_string) unless $r->is_success;
}

################################################################################
sub grafana_set_user_is_admin {
    my($ua, $grafana_user, $isAdmin) = @_;

    my $req = PUT "$API_URL/admin/users/".$grafana_user->{'id'}."/permissions", Content=>JSON->new->encode({
        isGrafanaAdmin => $isAdmin ? JSON::XS::true : JSON::XS::false,
    });
    my $r = $ua->request($req);
    LOGDIE($r->as_string) unless $r->is_success;
}

################################################################################
sub grafana_get_users {
    my $ua = shift;
    my $j = _parse_json($ua->get("${API_URL}/users"));
    my $users = {};
    for my $u (@$j) {
        $users->{$u->{login}} = $u;
    }
    return $users;
}

################################################################################
sub grafana_get_user {
    my ($ua, $id) = @_;
    my $r = $ua->get("${API_URL}/users/${id}");
    LOGDIE $r->status_line unless $r->is_success;
    _parse_json($r);
}

################################################################################
sub grafana_get_user_orgs {
    my ($ua, $id) = @_;
    my $r = $ua->get("${API_URL}/users/${id}/orgs");
    LOGDIE $r->status_line unless $r->is_success;
    _parse_json($r);
}

################################################################################
sub grafana_create_user {
    my ($ua, $user) = @_;
    my $req = POST "${API_URL}/admin/users",
        Content => JSON->new->encode({
            name     => ($user->{alias} // $user->{name}),
            email    => $user->{email} // $user->{name},
            login    => $user->{name},
            password => "..........", # is required by the API, but still useless for us
        });
    my $r = $ua->request($req);
    unless($r->is_success) {
        LOGDIE $r->status_line," - ",$r->content
    }
    return _parse_json($r)->{id};
}

################################################################################
sub grafana_change_user {
    my ($ua, $user) = @_;
    my $req = PUT "${API_URL}/users/".$user->{id},
        Content => JSON->new->encode({
            name     => ($user->{alias} // $user->{name}),
            email    => $user->{email} // $user->{name},
            login    => $user->{name},
        });
    my $r = $ua->request($req);
    unless($r->is_success) {
        use Data::Dumper; print STDERR Dumper($r);
        LOGDIE $r->status_line," - ",$r->content
    }
    return _parse_json($r)->{id};
}

################################################################################
sub grafana_delete_user {
    my ($ua, $user_id) = @_;
    my $grafana_users = grafana_get_users($ua);
    my $r = $ua->delete("${API_URL}/admin/users/".$user_id);
    unless($r->is_success) {
        LOGDIE $r->status_line," - ",$r->content
    }
    return _parse_json($r);
}

################################################################################
sub grafana_delete_user_org {
    my ($ua, $user_id, $org_id) = @_;
    my $grafana_users = grafana_get_users($ua);
    my $r = $ua->delete("${API_URL}/orgs/".$org_id."/users/".$user_id);
    unless($r->is_success) {
        LOGDIE $r->status_line," - ",$r->content
    }
    return _parse_json($r);
}

################################################################################
sub grafana_get_datasources {
    my ($ua, $id) = @_;
    my $r = $ua->get("${API_URL}/datasources");
    LOGDIE $r->status_line unless $r->is_success;
    _parse_json($r);
}

################################################################################
sub _request_handler {
    my($request, $ua, $h) = @_;
    $request->header("Content-Type" => "application/json");
    $request->header("Accept" => "application/json");
    $request->header("X-WEBAUTH-USER" => "omdadmin");
    $request;
}

################################################################################
sub _parse_json {
    my $r = shift;
    LOGDIE $r->status_line unless $r->is_success;
    my $content = $r->decoded_content;
    JSON->new->decode($content);
}
