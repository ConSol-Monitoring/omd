#!/usr/bin/env perl

use strict;
use warnings;
use XML::Simple;
use File::Temp qw/tempfile/;
use File::Copy qw/move/;
use XML::LibXML;
use Term::ReadKey;

if(!$ENV{'OMD_ROOT'}) {
    print  STDERR "ERROR: OMD_ROOT not set, this script is designed to run in an OMD environment.\n";
    exit 1;
}
chdir($ENV{'OMD_ROOT'});

if($ARGV[0] && ($ARGV[0] eq '-h' || $ARGV[0] eq '--help')) {
    print STDERR "usage: $0 [-f|-y] [-l|--livestatus] [<pnp xml files>]";
    exit(1);
}

my $ml;
if($ARGV[0] && ($ARGV[0] eq '-l' || $ARGV[0] eq '--livestatus')) {    
    use Monitoring::Livestatus;
    $ml = Monitoring::Livestatus->new( socket => "$ENV{OMD_ROOT}/tmp/run/live");
    shift @ARGV; 
}

if(!-e "etc/nagflux/config.gcfg") {
    print STDERR "ERROR: cannot read etc/nagflux/config.gcfg, this script requires nagflux to work.\n";
    exit 1;
}

my @xml_files = glob("var/pnp4nagios/perfdata/*/*.xml");
if(scalar @ARGV > 0) {
    @xml_files = grep(!/^-/mx, @ARGV);
}
my $num           = scalar @xml_files;
my $pnp_spool     = $ENV{OMD_ROOT}.'/var/pnp4nagios/spool';
my $nagflux_spool = `grep NagiosSpoolfileFolder etc/nagflux/config.gcfg`;
$nagflux_spool    =~ s/^.*?"(.*)".*?$/$1/sgmx;
chomp($nagflux_spool);

if(!-d $nagflux_spool) {
    print STDERR "ERROR: nagflux spool folder $nagflux_spool does not exist.\n";
    exit 1;
}

sub object_exists {
    return 1 if (! defined $ml);
    my $xml = shift; 

    my ($h) = `grep NAGIOS_AUTH_HOSTNAME $xml | sed -e 's/.*>\(.*\)<.*/\1/'`  =~ m/.*>(.*)<.*/ ;
    my ($s) = `grep NAGIOS_AUTH_SERVICEDESC $xml | sed -e 's/.*>\(.*\)<.*/\1/'`  =~ m/.*>(.*)<.*/ ;
    my $res;
    if ($s eq "Host Perfdata" ) {
        $res = $ml->selectscalar_value(sprintf "GET hosts\nColumns: host_name\nFilter: host_name = $h");
        $s = "";
    } else {
        $res = $ml->selectscalar_value(sprintf "GET services\nColumns: host_name description\nFilter: host_name = $h\nFilter: description = $s");
        $s = "/$s";
    }
    return (defined($res), sprintf ("%s%s",$h,$s) );
}


print STDERR "Ready to start the RRD perfdata import of ".$num." objects to ".$nagflux_spool.".\n";

if(defined $ml) {
    print STDERR "Import will be skipped for perfdata of non-existent objects in current oonfig.\n";
}
if($nagflux_spool eq $pnp_spool) {
    print STDERR "Make sure pnp4nagios is stopped or does not read from that spool folder.\n";
}

unless(grep(/^\-(f|y)$/mxi, @ARGV)) {
    print STDERR "Press any key to start or Ctrl+c to cancel.";
    ReadMode('cbreak');
    ReadKey(0);
    ReadMode('normal');
    print "\n\n";
}

my $x = 0;
my $skipped_noxml = 0;
my $skipped_noobject = 0;
my $skipped_badxml = 0;
my $skipped_norrd = 0;

for my $xml_file (@xml_files) {
    $x++;
    printf(STDERR "%02i/%02i reading from %s\n", $x, $num, $xml_file);
    if(!-s $xml_file) {
        print STDERR "  !! SKIPPED, file does not exist or is empty\n";
        $skipped_noxml++;
        next;
    }
    my @exists = object_exists($xml_file);
    if (!  $exists[0]) {
        print STDERR "  !! SKIPPED, object $exists[1] does not exist in current config\n";
        $skipped_noobject++;
        next; 
    }
    my ($fh, $filename) = tempfile();
    my $xml;
    eval {
        $xml = XMLin($xml_file);
    };
    if($@ || !$xml) {
        print STDERR "  !! SKIPPED, cannot read xml file: $@\n";
        $skipped_badxml++;
        next;
    }
    my $host    = $xml->{'NAGIOS_DISP_HOSTNAME'};
    my $service = $xml->{'NAGIOS_DISP_SERVICEDESC'};
    my $cmd     = $xml->{'NAGIOS_CHECK_COMMAND'};
    my $type    = 'SERVICEPERFDATA';
    if($service eq '_HOST_' || $xml->{'NAGIOS_SERVICEDESC'} eq '_HOST_' || $xml->{'NAGIOS_AUTH_SERVICEDESC'} eq '_HOST_') {
        $service = '';
        $type    = 'HOSTPERFDATA';
    }
    if(ref $xml->{DATASOURCE} ne 'ARRAY') {
        $xml->{DATASOURCE} = [$xml->{DATASOURCE}];
    }

    for my $ds (@{$xml->{DATASOURCE}}) {
        my $rrd_file = $ds->{'RRDFILE'};
        my $rrd_ds   = $ds->{'DS'};
        for my $key (qw/WARN_MIN WARN_MAX CRIT_MIN CRIT_MAX UNIT MIN MAX WARN CRIT/) {
            if(ref $ds->{$key} eq 'HASH' && scalar keys %{$ds->{$key}} == 0) {
                $ds->{$key} = '';
            }
        }
        print STDERR "  -> ".Encode::encode_utf8($rrd_file)."\n";
        if(!-s $rrd_file) {
            my $basedir = $xml_file;
            $basedir  =~ s%/[^/]*$%%gmx;
            $rrd_file =~ s%^.*/%%gmx;
            $rrd_file = $basedir.'/'.$rrd_file;
            if(!-s $rrd_file) {
                print STDERR "    !! SKIPPED, file does not exist or is empty\n";
                $skipped_norrd++;
                next;
            }
        }
        my $warning  = $ds->{'WARN'};
        my $critical = $ds->{'CRIT'};
        for my $type (qw/WARN CRIT/) {
            if($ds->{$type.'_MIN'} || $ds->{$type.'_MAX'}) {
                if($ds->{$type.'_RANGE_TYPE'} eq 'outside') {
                    $warning = $ds->{$type.'_MIN'}.':'.$ds->{$type.'_MAX'};
                } else {
                    $warning = '@'.$ds->{$type.'_MIN'}.':'.$ds->{$type.'_MAX'};
                }
            }
        }
        `rrdtool flushcached --daemon unix:tmp/run/rrdcached.sock '$rrd_file' >/dev/null 2>&1`;
        my $raw = `rrdtool dump '$rrd_file'`;
        my $parser = XML::LibXML->new();
        my $doc = XML::LibXML->load_xml(string => $raw, load_ext_dtd => 0);
        # import in reverse order, otherwise values from fine granular rrds would be overwritten from large ones
        for my $rra (reverse $doc->findnodes('/rrd/rra')) {
            my($cf) = $rra->findnodes('./cf');
            next if $cf->to_literal ne 'AVERAGE';
            my($data) = $rra->findnodes('./database');
            for my $row (split/\n/mx, $data) {
                my($timet, $val);
                if($row =~ m|^\s*\Q<!-- \E[^/]+/\ (\d+)\Q --> <row>\E(.*?)\Q</row>\E$|mx) {
                    $timet = $1;
                    my @values = $2 =~ m|<v>([^<]*)</v>|gmx;
                    $val = $values[$rrd_ds-1];
                }
                next unless defined $val;
                next if $val eq 'NaN';
                if($val =~ m/^([\d\.]+)+e([+\-\d]+)$/mx) {
                    $val = $1 * (10 ** $2);
                }
                if($type eq 'HOSTPERFDATA') {
                    my $txt = sprintf("DATATYPE::%s\tTIMET::%i\tHOSTNAME::%s\tHOSTPERFDATA::%s=%s%s;%s;%s;%s;%s\tHOSTCHECKCOMMAND::%s\tHOSTSTATE::UP\tHOSTSTATETYPE::HARD\n",
                                $type,
                                $timet,
                                $host,
                                $ds->{'LABEL'}, $val, $ds->{'UNIT'}, $warning, $critical, $ds->{'MIN'}, $ds->{'MAX'},
                                $cmd,
                    );
                    print($fh Encode::encode_utf8($txt));
                } else {
                    my $txt = sprintf("DATATYPE::%s\tTIMET::%i\tHOSTNAME::%s\tSERVICEDESC::%s\tSERVICEPERFDATA::%s=%s%s;%s;%s;%s;%s\tSERVICECHECKCOMMAND::%s\tHOSTSTATE::UP\tHOSTSTATETYPE::HARD\tSERVICESTATE::OK\tSERVICESTATETYPE::HARD\n",
                                $type,
                                $timet,
                                $host,
                                $service,
                                $ds->{'LABEL'}, $val, $ds->{'UNIT'}, $warning, $critical, $ds->{'MIN'}, $ds->{'MAX'},
                                $cmd,
                    );
                    print($fh Encode::encode_utf8($txt));
                }
            }
        }
    }
    close($fh);
    move($filename, $nagflux_spool.'/service-perfdata'.$x.time());
}
my $processed =  $num - $skipped_noxml - $skipped_noobject - $skipped_badxml;
print STDERR "\n\nfinished:\n";
print STDERR "  Imported objects: $processed ($skipped_norrd RRD files were not found)\n";
print STDERR "  Skipped objects (no XML): $skipped_noxml\n" if $skipped_noxml;
print STDERR "  Skipped objects (no object in cfg): $skipped_noobject\n" if $skipped_noobject;
print STDERR "  Skipped objects (bad XML): $skipped_badxml\n" if $skipped_badxml;



