From c7a281d1f3b2f9e6f4651c25062b226fe34dce7f Mon Sep 17 00:00:00 2001
From: Sven Nierlein <sven@nierlein.de>
Date: Mon, 26 Aug 2019 14:37:38 +0200
Subject: [PATCH] fix race condition during core reload on long running queries

reloading naemon while livestatus is still processing a query could lead to a
segfault because livestatus is still accessing internal core memory regions which
may be freed already.
This patch adds a check for the termination flag before each data row. This does not
completly solve the issue since it is theoretically still possible but the timeframe
is reduced from gathering the complete output which might take while to processing a
single data row which is quite fast.

Signed-off-by: Sven Nierlein <sven@nierlein.de>
---
 src/LogEntry.cc     |  1 -
 src/OutputBuffer.cc | 25 +++++++++++++++++--------
 src/OutputBuffer.h  |  9 +++++----
 src/Query.cc        | 17 ++++++++++++-----
 src/module.c        |  4 ++--
 src/store.cc        |  9 ++++-----
 src/store.h         |  5 ++---
 7 files changed, 42 insertions(+), 28 deletions(-)

diff --git a/src/LogEntry.cc b/src/LogEntry.cc
index 9473d57..b9f4d73 100644
--- a/src/LogEntry.cc
+++ b/src/LogEntry.cc
@@ -304,4 +304,3 @@ int LogEntry::hostStateToInt(char *s)
         default:  return 3;
     }
 }
-
diff --git a/src/OutputBuffer.cc b/src/OutputBuffer.cc
index fa61d3b..1a309b4 100644
--- a/src/OutputBuffer.cc
+++ b/src/OutputBuffer.cc
@@ -35,8 +35,9 @@
 #define WRITE_TIMEOUT_USEC 100000
 
 
-OutputBuffer::OutputBuffer()
-  : _max_size(INITIAL_OUTPUT_BUFFER_SIZE)
+OutputBuffer::OutputBuffer(int *termination_flag) :
+  _termination_flag(termination_flag),
+  _max_size(INITIAL_OUTPUT_BUFFER_SIZE)
 {
     _buffer = (char *)malloc(_max_size);
     _end = _buffer + _max_size;
@@ -91,7 +92,7 @@ void OutputBuffer::needSpace(unsigned len)
     }
 }
 
-void OutputBuffer::flush(int fd, int *termination_flag)
+void OutputBuffer::flush(int fd)
 {
     const char *buffer = _buffer;
     int s = size();
@@ -106,19 +107,19 @@ void OutputBuffer::flush(int fd, int *termination_flag)
     {
         char header[17];
         snprintf(header, sizeof(header), "%03d %11d\n", _response_code, s);
-        writeData(fd, termination_flag, header, 16);
-        writeData(fd, termination_flag, buffer, s);
+        writeData(fd, header, 16);
+        writeData(fd, buffer, s);
     }
     else
-        writeData(fd, termination_flag, buffer, s);
+        writeData(fd, buffer, s);
     reset();
 }
 
 
-void OutputBuffer::writeData(int fd, int *termination_flag, const char *write_from, int to_write)
+void OutputBuffer::writeData(int fd, const char *write_from, int to_write)
 {
     struct timeval tv;
-    while (!*termination_flag && to_write > 0)
+    while (!*_termination_flag && to_write > 0)
     {
         tv.tv_sec  = WRITE_TIMEOUT_USEC / 1000000;
         tv.tv_usec = WRITE_TIMEOUT_USEC % 1000000;
@@ -159,3 +160,11 @@ void OutputBuffer::setError(unsigned code, const char *format, ...)
         _response_code = code;
     }
 }
+
+bool OutputBuffer::shouldTerminate()
+{
+    if(*_termination_flag) {
+        return true;
+    }
+    return false;
+}
diff --git a/src/OutputBuffer.h b/src/OutputBuffer.h
index 12303fc..1227052 100644
--- a/src/OutputBuffer.h
+++ b/src/OutputBuffer.h
@@ -43,6 +43,7 @@ using namespace std;
 
 class OutputBuffer
 {
+    int *_termination_flag;
     char *_buffer;
     char *_writepos;
     char *_end;
@@ -53,7 +54,7 @@ class OutputBuffer
     bool _do_keepalive;
 
 public:
-    OutputBuffer();
+    OutputBuffer(int *termination_flag);
     ~OutputBuffer();
     const char *buffer() { return _buffer; }
     unsigned size() { return _writepos - _buffer; }
@@ -61,7 +62,8 @@ class OutputBuffer
     void addString(const char *);
     void addBuffer(const char *, unsigned);
     void reset();
-    void flush(int fd, int *termination_flag);
+    void flush(int fd);
+    bool shouldTerminate();
     void setResponseHeader(int r) { _response_header = r; }
     int responseHeader() { return _response_header; }
     void setDoKeepalive(bool d) { _do_keepalive = d; }
@@ -71,9 +73,8 @@ class OutputBuffer
 
 private:
     void needSpace(unsigned);
-    void writeData(int fd, int *, const char *, int);
+    void writeData(int fd, const char *, int);
 };
 
 
 #endif // OutputBuffer_h
-
diff --git a/src/Query.cc b/src/Query.cc
index 1a84c73..42522d6 100644
--- a/src/Query.cc
+++ b/src/Query.cc
@@ -460,7 +460,7 @@ void Query::parseStatsLine(char *line)
         stats_col = new StatsColumn(column, 0, operation);
     _stats_columns.push_back(stats_col);
 
-    /* Default to old behaviour: do not output column headers if we 
+    /* Default to old behaviour: do not output column headers if we
        do Stats queries */
     _show_column_headers = false;
 }
@@ -874,7 +874,7 @@ void Query::start()
             outputString(column->name());
         }
 
-        // Output dummy headers for stats columns 
+        // Output dummy headers for stats columns
         int col = 1;
         char colheader[32];
         for (_stats_columns_t::iterator it = _stats_columns.begin();
@@ -920,6 +920,10 @@ bool Query::processDataset(void *data)
         return false;
     }
 
+    if (_output->shouldTerminate()) {
+        _output->setError(RESPONSE_CODE_LIMIT_EXCEEDED, "Query canceled, core is shutting down.");
+        return false;
+    }
 
     if (_filter.accepts(data) && (!_auth_user || _table->isAuthorized(_auth_user, data))) {
 
@@ -931,6 +935,11 @@ bool Query::processDataset(void *data)
             return false;
         }
 
+        if (_output->shouldTerminate()) {
+            _output->setError(RESPONSE_CODE_LIMIT_EXCEEDED, "Query canceled, core is shutting down.");
+            return false;
+        }
+
         if (doStats())
         {
             Aggregator **aggr;
@@ -1071,7 +1080,7 @@ void Query::finish()
         outputDatasetEnd();
         delete[] _stats_aggregators;
     }
-   
+
     else if( _do_sorting ) {
         vector<void *> outbuf; /* Used to reverse display order */
 
@@ -1449,5 +1458,3 @@ void Query::doWait()
         }
     } while (!_wait_condition.accepts(_wait_object));
 }
-
-
diff --git a/src/module.c b/src/module.c
index dfc23e5..ccb8e3f 100644
--- a/src/module.c
+++ b/src/module.c
@@ -179,7 +179,7 @@ static int accept_connection(int sd, int events, void *discard)
 void *client_thread(void *data)
 {
     void *input_buffer = create_inputbuffer(&g_should_terminate);
-    void *output_buffer = create_outputbuffer();
+    void *output_buffer = create_outputbuffer(&g_should_terminate);
 
     int cc = *((int *)data);
     free(data);
@@ -193,7 +193,7 @@ void *client_thread(void *data)
             if (g_debug_level >= 2 && requestnr > 1)
                 logger(LG_INFO, "Handling request %d on same connection", requestnr);
             keepalive = store_answer_request(input_buffer, output_buffer);
-            flush_output_buffer(output_buffer, cc, &g_should_terminate);
+            flush_output_buffer(output_buffer, cc);
             g_counters[COUNTER_REQUESTS]++;
             requestnr ++;
         }
diff --git a/src/store.cc b/src/store.cc
index ef8c4b3..fc6814b 100644
--- a/src/store.cc
+++ b/src/store.cc
@@ -80,14 +80,14 @@ int store_answer_request(void *ib, void *ob)
     return g_store->answerRequest((InputBuffer *)ib, (OutputBuffer *)ob);
 }
 
-void *create_outputbuffer()
+void *create_outputbuffer(int *termination_flag)
 {
-    return new OutputBuffer();
+    return new OutputBuffer(termination_flag);
 }
 
-void flush_output_buffer(void *ob, int fd, int *termination_flag)
+void flush_output_buffer(void *ob, int fd)
 {
-    ((OutputBuffer *)ob)->flush(fd, termination_flag);
+    ((OutputBuffer *)ob)->flush(fd);
 }
 
 void delete_outputbuffer(void *ob)
@@ -114,4 +114,3 @@ void update_timeperiods_cache(time_t now)
 {
     g_timeperiods_cache->update(now);
 }
-
diff --git a/src/store.h b/src/store.h
index f5eb061..2abe060 100644
--- a/src/store.h
+++ b/src/store.h
@@ -37,8 +37,8 @@ extern "C"
     void store_register_comment(nebstruct_comment_data *);
     void store_register_downtime(nebstruct_downtime_data *);
     int  store_answer_request(void *input_buffer, void *output_buffer);
-    void *create_outputbuffer();
-    void flush_output_buffer(void *ob, int fd, int *termination_flag);
+    void *create_outputbuffer(int *termination_flag);
+    void flush_output_buffer(void *ob, int fd);
     void delete_outputbuffer(void *);
     void *create_inputbuffer(int *termination_flag);
     void set_inputbuffer_fd(void *, int fd);
@@ -53,4 +53,3 @@ extern "C"
 #endif
 
 #endif /* store_h */
-
