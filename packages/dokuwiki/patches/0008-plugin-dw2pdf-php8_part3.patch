--- a/lib/plugins/dw2pdf/vendor/mpdf/mpdf/src/Color/ColorConverter.php	2022-08-11 16:36:23.373794971 +0200
+++ b/lib/plugins/dw2pdf/vendor/mpdf/mpdf/src/Color/ColorConverter.php	2022-08-11 16:38:50.743341759 +0200
@@ -66,15 +66,15 @@
 	{
 		$this->ensureBinaryColorFormat($c);
 
-		if ($c{0} == static::MODE_RGB || $c{0} == static::MODE_RGBA) {
-			list($h, $s, $l) = $this->colorModeConverter->rgb2hsl(ord($c{1}) / 255, ord($c{2}) / 255, ord($c{3}) / 255);
+		if ($c[0] == static::MODE_RGB || $c[0] == static::MODE_RGBA) {
+			list($h, $s, $l) = $this->colorModeConverter->rgb2hsl(ord($c[1]) / 255, ord($c[2]) / 255, ord($c[3]) / 255);
 			$l += ((1 - $l) * 0.8);
 			list($r, $g, $b) = $this->colorModeConverter->hsl2rgb($h, $s, $l);
 			$ret = [3, $r, $g, $b];
-		} elseif ($c{0} == static::MODE_CMYK || $c{0} == static::MODE_CMYKA) {
-			$ret = [4, max(0, ord($c{1}) - 20), max(0, ord($c{2}) - 20), max(0, ord($c{3}) - 20), max(0, ord($c{4}) - 20)];
-		} elseif ($c{0} == static::MODE_GRAYSCALE) {
-			$ret = [1, min(255, ord($c{1}) + 32)];
+		} elseif ($c[0] == static::MODE_CMYK || $c[0] == static::MODE_CMYKA) {
+			$ret = [4, max(0, ord($c[1]) - 20), max(0, ord($c[2]) - 20), max(0, ord($c[3]) - 20), max(0, ord($c[4]) - 20)];
+		} elseif ($c[0] == static::MODE_GRAYSCALE) {
+			$ret = [1, min(255, ord($c[1]) + 32)];
 		}
 
 		$c = array_pad($ret, 6, 0);
@@ -87,16 +87,16 @@
 	{
 		$this->ensureBinaryColorFormat($c);
 
-		if ($c{0} == static::MODE_RGB || $c{0} == static::MODE_RGBA) {
-			list($h, $s, $l) = $this->colorModeConverter->rgb2hsl(ord($c{1}) / 255, ord($c{2}) / 255, ord($c{3}) / 255);
+		if ($c[0] == static::MODE_RGB || $c[0] == static::MODE_RGBA) {
+			list($h, $s, $l) = $this->colorModeConverter->rgb2hsl(ord($c[1]) / 255, ord($c[2]) / 255, ord($c[3]) / 255);
 			$s *= 0.25;
 			$l *= 0.75;
 			list($r, $g, $b) = $this->colorModeConverter->hsl2rgb($h, $s, $l);
 			$ret = [3, $r, $g, $b];
-		} elseif ($c{0} == static::MODE_CMYK || $c{0} == static::MODE_CMYKA) {
-			$ret = [4, min(100, ord($c{1}) + 20), min(100, ord($c{2}) + 20), min(100, ord($c{3}) + 20), min(100, ord($c{4}) + 20)];
-		} elseif ($c{0} == static::MODE_GRAYSCALE) {
-			$ret = [1, max(0, ord($c{1}) - 32)];
+		} elseif ($c[0] == static::MODE_CMYK || $c[0] == static::MODE_CMYKA) {
+			$ret = [4, min(100, ord($c[1]) + 20), min(100, ord($c[2]) + 20), min(100, ord($c[3]) + 20), min(100, ord($c[4]) + 20)];
+		} elseif ($c[0] == static::MODE_GRAYSCALE) {
+			$ret = [1, max(0, ord($c[1]) - 32)];
 		}
 		$c = array_pad($ret, 6, 0);
 		$cstr = pack('a1ccccc', $c[0], $c[1] & 0xFF, $c[2] & 0xFF, $c[3] & 0xFF, $c[4] & 0xFF, $c[5] & 0xFF);
@@ -112,16 +112,16 @@
 	{
 		$this->ensureBinaryColorFormat($c);
 
-		if ($c{0} == static::MODE_RGB || $c{0} == static::MODE_RGBA) {
-			return [3, 255 - ord($c{1}), 255 - ord($c{2}), 255 - ord($c{3})];
+		if ($c[0] == static::MODE_RGB || $c[0] == static::MODE_RGBA) {
+			return [3, 255 - ord($c[1]), 255 - ord($c[2]), 255 - ord($c[3])];
 		}
 
-		if ($c{0} == static::MODE_CMYK || $c{0} == static::MODE_CMYKA) {
-			return [4, 100 - ord($c{1}), 100 - ord($c{2}), 100 - ord($c{3}), 100 - ord($c{4})];
+		if ($c[0] == static::MODE_CMYK || $c[0] == static::MODE_CMYKA) {
+			return [4, 100 - ord($c[1]), 100 - ord($c[2]), 100 - ord($c[3]), 100 - ord($c[4])];
 		}
 
-		if ($c{0} == static::MODE_GRAYSCALE) {
-			return [1, 255 - ord($c{1})];
+		if ($c[0] == static::MODE_GRAYSCALE) {
+			return [1, 255 - ord($c[1])];
 		}
 
 		// Cannot cope with non-RGB colors at present
@@ -135,28 +135,28 @@
 	 */
 	public function colAtoString($c)
 	{
-		if ($c{0} == static::MODE_GRAYSCALE) {
-			return 'rgb(' . ord($c{1}) . ', ' . ord($c{1}) . ', ' . ord($c{1}) . ')';
+		if ($c[0] == static::MODE_GRAYSCALE) {
+			return 'rgb(' . ord($c[1]) . ', ' . ord($c[1]) . ', ' . ord($c[1]) . ')';
 		}
 
-		if ($c{0} == static::MODE_SPOT) {
-			return 'spot(' . ord($c{1}) . ', ' . ord($c{2}) . ')';
+		if ($c[0] == static::MODE_SPOT) {
+			return 'spot(' . ord($c[1]) . ', ' . ord($c[2]) . ')';
 		}
 
-		if ($c{0} == static::MODE_RGB) {
-			return 'rgb(' . ord($c{1}) . ', ' . ord($c{2}) . ', ' . ord($c{3}) . ')';
+		if ($c[0] == static::MODE_RGB) {
+			return 'rgb(' . ord($c[1]) . ', ' . ord($c[2]) . ', ' . ord($c[3]) . ')';
 		}
 
-		if ($c{0} == static::MODE_CMYK) {
-			return 'cmyk(' . ord($c{1}) . ', ' . ord($c{2}) . ', ' . ord($c{3}) . ', ' . ord($c{4}) . ')';
+		if ($c[0] == static::MODE_CMYK) {
+			return 'cmyk(' . ord($c[1]) . ', ' . ord($c[2]) . ', ' . ord($c[3]) . ', ' . ord($c[4]) . ')';
 		}
 
-		if ($c{0} == static::MODE_RGBA) {
-			return 'rgba(' . ord($c{1}) . ', ' . ord($c{2}) . ', ' . ord($c{3}) . ', ' . sprintf('%0.2F', ord($c{4}) / 100) . ')';
+		if ($c[0] == static::MODE_RGBA) {
+			return 'rgba(' . ord($c[1]) . ', ' . ord($c[2]) . ', ' . ord($c[3]) . ', ' . sprintf('%0.2F', ord($c[4]) / 100) . ')';
 		}
 
-		if ($c{0} == static::MODE_CMYKA) {
-			return 'cmyka(' . ord($c{1}) . ', ' . ord($c{2}) . ', ' . ord($c{3}) . ', ' . ord($c{4}) . ', ' . sprintf('%0.2F', ord($c{5}) / 100) . ')';
+		if ($c[0] == static::MODE_CMYKA) {
+			return 'cmyka(' . ord($c[1]) . ', ' . ord($c[2]) . ', ' . ord($c[3]) . ', ' . ord($c[4]) . ', ' . sprintf('%0.2F', ord($c[5]) / 100) . ')';
 		}
 
 		return '';
