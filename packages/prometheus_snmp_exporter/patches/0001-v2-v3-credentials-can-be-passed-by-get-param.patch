diff -Naur a/main.go b/main.go
--- a/main.go	2021-02-03 13:08:12.326782300 +0100
+++ b/main.go	2021-02-03 13:13:00.308508600 +0100
@@ -22,6 +22,8 @@
 	"sync"
 	"syscall"
 	"time"
+	"strings"
+	"strconv"
 
 	"github.com/go-kit/kit/log"
 	"github.com/go-kit/kit/log/level"
@@ -95,6 +97,62 @@
 		return
 	}
 
+	snmpVersion := query.Get("version")
+	if v, err := strconv.Atoi(snmpVersion); snmpVersion != "" && err == nil {
+		level.Debug(logger).Log("msg", "Overriding version", "versions", v)
+		module.WalkParams.Version = v
+	}
+
+	community := query.Get("community")
+	if community != "" {
+		level.Debug(logger).Log("msg", "Overriding community", "community", community)
+		module.WalkParams.Auth.Community = config.Secret(community)
+	}
+
+	securityLevel := query.Get("security_level")
+	if securityLevel != "" {
+		level.Debug(logger).Log("msg", "Overriding security_level", "security_level", securityLevel)
+		module.WalkParams.Auth.SecurityLevel = securityLevel
+	}
+
+	username := query.Get("username")
+	if username != "" {
+		level.Debug(logger).Log("msg", "Overriding username", "username", username)
+		module.WalkParams.Auth.Username = username
+	}
+
+	password := query.Get("password")
+	if password != "" {
+		level.Debug(logger).Log("msg", "Overriding password", "password", password)
+		module.WalkParams.Auth.Password = config.Secret(password)
+	}
+
+	authProtocol := query.Get("auth_protocol")
+	if authProtocol != "" {
+		authProtocol = strings.ToUpper(authProtocol)
+		level.Debug(logger).Log("msg", "Overriding auth_protocol", "auth_protocol", authProtocol)
+		module.WalkParams.Auth.AuthProtocol = authProtocol
+	}
+
+	privProtocol := query.Get("priv_protocol")
+	if privProtocol != "" {
+		privProtocol = strings.ToUpper(privProtocol)
+		level.Debug(logger).Log("msg", "Overriding priv_protocol", "priv_protocol", privProtocol)
+		module.WalkParams.Auth.PrivProtocol = privProtocol
+	}
+
+	privPassword := query.Get("priv_password")
+	if privPassword != "" {
+		level.Debug(logger).Log("msg", "Overriding priv_password", "priv_password", privPassword)
+		module.WalkParams.Auth.PrivPassword = config.Secret(privPassword)
+	}
+
+	contextName := query.Get("context_name")
+	if contextName != "" {
+		level.Debug(logger).Log("msg", "Overriding context_name", "context_name", contextName)
+		module.WalkParams.Auth.ContextName = contextName
+	}
+
 	logger = log.With(logger, "module", moduleName, "target", target)
 	level.Debug(logger).Log("msg", "Starting scrape")
 
